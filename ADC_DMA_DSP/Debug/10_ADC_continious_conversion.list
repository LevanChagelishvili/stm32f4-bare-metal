
10_ADC_continious_conversion.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000148c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  0800163c  0800163c  0001163c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080016ec  080016ec  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  080016ec  080016ec  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  080016ec  080016ec  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080016ec  080016ec  000116ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080016f0  080016f0  000116f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  080016f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020064  2**0
                  CONTENTS
 10 .bss          00000034  20000064  20000064  00020064  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000098  20000098  00020064  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 13 .debug_info   000012aa  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000005a6  00000000  00000000  0002133e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000190  00000000  00000000  000218e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000138  00000000  00000000  00021a78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000188d1  00000000  00000000  00021bb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001f2a  00000000  00000000  0003a481  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00085721  00000000  00000000  0003c3ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000c1acc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000ca4  00000000  00000000  000c1b1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000064 	.word	0x20000064
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08001624 	.word	0x08001624

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000068 	.word	0x20000068
 80001ec:	08001624 	.word	0x08001624

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__io_putchar>:
void uart2_write(int ch);
char uart2_read(void);


int __io_putchar(int ch)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b082      	sub	sp, #8
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
	uart2_write(ch);
 8000298:	6878      	ldr	r0, [r7, #4]
 800029a:	f000 f89b 	bl	80003d4 <uart2_write>
	return ch;
 800029e:	687b      	ldr	r3, [r7, #4]
}
 80002a0:	4618      	mov	r0, r3
 80002a2:	3708      	adds	r7, #8
 80002a4:	46bd      	mov	sp, r7
 80002a6:	bd80      	pop	{r7, pc}

080002a8 <uart2_Rxtx_init>:
	// Enable uart module
	USART2->CR1 |= CR1_UE;
}

void uart2_Rxtx_init(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	af00      	add	r7, sp, #0
	// Enable clock access to GPIOA
	RCC->AHB1ENR |= GPIOAEN;
 80002ac:	4b32      	ldr	r3, [pc, #200]	; (8000378 <uart2_Rxtx_init+0xd0>)
 80002ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002b0:	4a31      	ldr	r2, [pc, #196]	; (8000378 <uart2_Rxtx_init+0xd0>)
 80002b2:	f043 0301 	orr.w	r3, r3, #1
 80002b6:	6313      	str	r3, [r2, #48]	; 0x30

	// PA2 to ultimate function mode
	GPIOA->MODER &= ~ (1U << 4);
 80002b8:	4b30      	ldr	r3, [pc, #192]	; (800037c <uart2_Rxtx_init+0xd4>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	4a2f      	ldr	r2, [pc, #188]	; (800037c <uart2_Rxtx_init+0xd4>)
 80002be:	f023 0310 	bic.w	r3, r3, #16
 80002c2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U << 5);
 80002c4:	4b2d      	ldr	r3, [pc, #180]	; (800037c <uart2_Rxtx_init+0xd4>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	4a2c      	ldr	r2, [pc, #176]	; (800037c <uart2_Rxtx_init+0xd4>)
 80002ca:	f043 0320 	orr.w	r3, r3, #32
 80002ce:	6013      	str	r3, [r2, #0]

	// Set PA2 alternate function type to UART_Tx (AF07)
	GPIOA->AFR[0] |= (1U << 8);
 80002d0:	4b2a      	ldr	r3, [pc, #168]	; (800037c <uart2_Rxtx_init+0xd4>)
 80002d2:	6a1b      	ldr	r3, [r3, #32]
 80002d4:	4a29      	ldr	r2, [pc, #164]	; (800037c <uart2_Rxtx_init+0xd4>)
 80002d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002da:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U << 9);
 80002dc:	4b27      	ldr	r3, [pc, #156]	; (800037c <uart2_Rxtx_init+0xd4>)
 80002de:	6a1b      	ldr	r3, [r3, #32]
 80002e0:	4a26      	ldr	r2, [pc, #152]	; (800037c <uart2_Rxtx_init+0xd4>)
 80002e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002e6:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U << 10);
 80002e8:	4b24      	ldr	r3, [pc, #144]	; (800037c <uart2_Rxtx_init+0xd4>)
 80002ea:	6a1b      	ldr	r3, [r3, #32]
 80002ec:	4a23      	ldr	r2, [pc, #140]	; (800037c <uart2_Rxtx_init+0xd4>)
 80002ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002f2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U << 11);
 80002f4:	4b21      	ldr	r3, [pc, #132]	; (800037c <uart2_Rxtx_init+0xd4>)
 80002f6:	6a1b      	ldr	r3, [r3, #32]
 80002f8:	4a20      	ldr	r2, [pc, #128]	; (800037c <uart2_Rxtx_init+0xd4>)
 80002fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80002fe:	6213      	str	r3, [r2, #32]

	// Rx pin enable and config
	GPIOA->MODER &= ~ (1U << 6);
 8000300:	4b1e      	ldr	r3, [pc, #120]	; (800037c <uart2_Rxtx_init+0xd4>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	4a1d      	ldr	r2, [pc, #116]	; (800037c <uart2_Rxtx_init+0xd4>)
 8000306:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800030a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U << 7);
 800030c:	4b1b      	ldr	r3, [pc, #108]	; (800037c <uart2_Rxtx_init+0xd4>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	4a1a      	ldr	r2, [pc, #104]	; (800037c <uart2_Rxtx_init+0xd4>)
 8000312:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000316:	6013      	str	r3, [r2, #0]

	GPIOA->AFR[0] |= (1U << 12);
 8000318:	4b18      	ldr	r3, [pc, #96]	; (800037c <uart2_Rxtx_init+0xd4>)
 800031a:	6a1b      	ldr	r3, [r3, #32]
 800031c:	4a17      	ldr	r2, [pc, #92]	; (800037c <uart2_Rxtx_init+0xd4>)
 800031e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000322:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U << 13);
 8000324:	4b15      	ldr	r3, [pc, #84]	; (800037c <uart2_Rxtx_init+0xd4>)
 8000326:	6a1b      	ldr	r3, [r3, #32]
 8000328:	4a14      	ldr	r2, [pc, #80]	; (800037c <uart2_Rxtx_init+0xd4>)
 800032a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800032e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U << 14);
 8000330:	4b12      	ldr	r3, [pc, #72]	; (800037c <uart2_Rxtx_init+0xd4>)
 8000332:	6a1b      	ldr	r3, [r3, #32]
 8000334:	4a11      	ldr	r2, [pc, #68]	; (800037c <uart2_Rxtx_init+0xd4>)
 8000336:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800033a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U << 15);
 800033c:	4b0f      	ldr	r3, [pc, #60]	; (800037c <uart2_Rxtx_init+0xd4>)
 800033e:	6a1b      	ldr	r3, [r3, #32]
 8000340:	4a0e      	ldr	r2, [pc, #56]	; (800037c <uart2_Rxtx_init+0xd4>)
 8000342:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000346:	6213      	str	r3, [r2, #32]

	// Enable clock access to uart2
	RCC->APB1ENR |= USART2EN;
 8000348:	4b0b      	ldr	r3, [pc, #44]	; (8000378 <uart2_Rxtx_init+0xd0>)
 800034a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800034c:	4a0a      	ldr	r2, [pc, #40]	; (8000378 <uart2_Rxtx_init+0xd0>)
 800034e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000352:	6413      	str	r3, [r2, #64]	; 0x40

	// Configure baudrate
	uart_set_baudrate(USART2, APB1_CLK, UART_BAUDRATE);
 8000354:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000358:	4909      	ldr	r1, [pc, #36]	; (8000380 <uart2_Rxtx_init+0xd8>)
 800035a:	480a      	ldr	r0, [pc, #40]	; (8000384 <uart2_Rxtx_init+0xdc>)
 800035c:	f000 f814 	bl	8000388 <uart_set_baudrate>

	// UART transmit enable
	USART2->CR1 = (CR1_RE | CR1_TE);
 8000360:	4b08      	ldr	r3, [pc, #32]	; (8000384 <uart2_Rxtx_init+0xdc>)
 8000362:	220c      	movs	r2, #12
 8000364:	60da      	str	r2, [r3, #12]

	// Enable uart module
	USART2->CR1 |= CR1_UE;
 8000366:	4b07      	ldr	r3, [pc, #28]	; (8000384 <uart2_Rxtx_init+0xdc>)
 8000368:	68db      	ldr	r3, [r3, #12]
 800036a:	4a06      	ldr	r2, [pc, #24]	; (8000384 <uart2_Rxtx_init+0xdc>)
 800036c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000370:	60d3      	str	r3, [r2, #12]
}
 8000372:	bf00      	nop
 8000374:	bd80      	pop	{r7, pc}
 8000376:	bf00      	nop
 8000378:	40023800 	.word	0x40023800
 800037c:	40020000 	.word	0x40020000
 8000380:	00f42400 	.word	0x00f42400
 8000384:	40004400 	.word	0x40004400

08000388 <uart_set_baudrate>:

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b084      	sub	sp, #16
 800038c:	af00      	add	r7, sp, #0
 800038e:	60f8      	str	r0, [r7, #12]
 8000390:	60b9      	str	r1, [r7, #8]
 8000392:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_bd(PeriphClk,BaudRate);
 8000394:	6879      	ldr	r1, [r7, #4]
 8000396:	68b8      	ldr	r0, [r7, #8]
 8000398:	f000 f808 	bl	80003ac <compute_uart_bd>
 800039c:	4603      	mov	r3, r0
 800039e:	461a      	mov	r2, r3
 80003a0:	68fb      	ldr	r3, [r7, #12]
 80003a2:	609a      	str	r2, [r3, #8]
}
 80003a4:	bf00      	nop
 80003a6:	3710      	adds	r7, #16
 80003a8:	46bd      	mov	sp, r7
 80003aa:	bd80      	pop	{r7, pc}

080003ac <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate)
{
 80003ac:	b480      	push	{r7}
 80003ae:	b083      	sub	sp, #12
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]
 80003b4:	6039      	str	r1, [r7, #0]
	return (PeriphClk + BaudRate / 2) / BaudRate;
 80003b6:	683b      	ldr	r3, [r7, #0]
 80003b8:	085a      	lsrs	r2, r3, #1
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	441a      	add	r2, r3
 80003be:	683b      	ldr	r3, [r7, #0]
 80003c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80003c4:	b29b      	uxth	r3, r3
}
 80003c6:	4618      	mov	r0, r3
 80003c8:	370c      	adds	r7, #12
 80003ca:	46bd      	mov	sp, r7
 80003cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d0:	4770      	bx	lr
	...

080003d4 <uart2_write>:

	return USART2->DR;
}

void uart2_write(int ch)
{
 80003d4:	b480      	push	{r7}
 80003d6:	b083      	sub	sp, #12
 80003d8:	af00      	add	r7, sp, #0
 80003da:	6078      	str	r0, [r7, #4]
	// Make sure that transmit data register is empty
	while(!(USART2->SR & SR_TXE)){}
 80003dc:	bf00      	nop
 80003de:	4b08      	ldr	r3, [pc, #32]	; (8000400 <uart2_write+0x2c>)
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d0f9      	beq.n	80003de <uart2_write+0xa>

	// Write to transmit data register
	USART2->DR = (ch & 0xFF);
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	4a04      	ldr	r2, [pc, #16]	; (8000400 <uart2_write+0x2c>)
 80003ee:	b2db      	uxtb	r3, r3
 80003f0:	6053      	str	r3, [r2, #4]
}
 80003f2:	bf00      	nop
 80003f4:	370c      	adds	r7, #12
 80003f6:	46bd      	mov	sp, r7
 80003f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fc:	4770      	bx	lr
 80003fe:	bf00      	nop
 8000400:	40004400 	.word	0x40004400

08000404 <pa1_adc_int>:
#define ADCPRE			0x00
#define ADCCR1_RES		(1U << 0)


void pa1_adc_int(void)
{
 8000404:	b480      	push	{r7}
 8000406:	af00      	add	r7, sp, #0
	// Enable clock to GPIOA
	RCC->AHB1ENR |= GPIOAEN;
 8000408:	4b1b      	ldr	r3, [pc, #108]	; (8000478 <pa1_adc_int+0x74>)
 800040a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800040c:	4a1a      	ldr	r2, [pc, #104]	; (8000478 <pa1_adc_int+0x74>)
 800040e:	f043 0301 	orr.w	r3, r3, #1
 8000412:	6313      	str	r3, [r2, #48]	; 0x30

	// Set the mode of PA1 to analog
	GPIOA->MODER &= ~0x0C;// |= (1U << 2);
 8000414:	4b19      	ldr	r3, [pc, #100]	; (800047c <pa1_adc_int+0x78>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	4a18      	ldr	r2, [pc, #96]	; (800047c <pa1_adc_int+0x78>)
 800041a:	f023 030c 	bic.w	r3, r3, #12
 800041e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= 0x0C;// (1U << 3);
 8000420:	4b16      	ldr	r3, [pc, #88]	; (800047c <pa1_adc_int+0x78>)
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	4a15      	ldr	r2, [pc, #84]	; (800047c <pa1_adc_int+0x78>)
 8000426:	f043 030c 	orr.w	r3, r3, #12
 800042a:	6013      	str	r3, [r2, #0]

	// Enable clock to ADC
	RCC->APB2ENR |= ADC1EN;
 800042c:	4b12      	ldr	r3, [pc, #72]	; (8000478 <pa1_adc_int+0x74>)
 800042e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000430:	4a11      	ldr	r2, [pc, #68]	; (8000478 <pa1_adc_int+0x74>)
 8000432:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000436:	6453      	str	r3, [r2, #68]	; 0x44

	// Sampling time
	ADC1->SMPR2 |= SMPR2_SMP1;
 8000438:	4b11      	ldr	r3, [pc, #68]	; (8000480 <pa1_adc_int+0x7c>)
 800043a:	691b      	ldr	r3, [r3, #16]
 800043c:	4a10      	ldr	r2, [pc, #64]	; (8000480 <pa1_adc_int+0x7c>)
 800043e:	f043 0308 	orr.w	r3, r3, #8
 8000442:	6113      	str	r3, [r2, #16]

	// Common control register / Set prescaler
	ADC->CCR = ADCPRE;// PCLK2 dividted by 2
 8000444:	4b0f      	ldr	r3, [pc, #60]	; (8000484 <pa1_adc_int+0x80>)
 8000446:	2200      	movs	r2, #0
 8000448:	605a      	str	r2, [r3, #4]

	// Control register 1 / Select resolution
	ADC1->CR1 |= ADCCR1_RES;// 12 bit / minimum 12 ADCCLK cycles + sampling time
 800044a:	4b0d      	ldr	r3, [pc, #52]	; (8000480 <pa1_adc_int+0x7c>)
 800044c:	685b      	ldr	r3, [r3, #4]
 800044e:	4a0c      	ldr	r2, [pc, #48]	; (8000480 <pa1_adc_int+0x7c>)
 8000450:	f043 0301 	orr.w	r3, r3, #1
 8000454:	6053      	str	r3, [r2, #4]

	// Conversion sequence start
	//ADC1->SQR3 = 0;
	ADC1->SQR3 = ADC_CH1;
 8000456:	4b0a      	ldr	r3, [pc, #40]	; (8000480 <pa1_adc_int+0x7c>)
 8000458:	2201      	movs	r2, #1
 800045a:	635a      	str	r2, [r3, #52]	; 0x34

	// Conversion sequence length
	ADC1->SQR1 = ADC_SEQ_LEN;
 800045c:	4b08      	ldr	r3, [pc, #32]	; (8000480 <pa1_adc_int+0x7c>)
 800045e:	2200      	movs	r2, #0
 8000460:	62da      	str	r2, [r3, #44]	; 0x2c

	// Enable ADC module
	ADC1->CR2 |= CR2_ADON;// Continious conversion mode
 8000462:	4b07      	ldr	r3, [pc, #28]	; (8000480 <pa1_adc_int+0x7c>)
 8000464:	689b      	ldr	r3, [r3, #8]
 8000466:	4a06      	ldr	r2, [pc, #24]	; (8000480 <pa1_adc_int+0x7c>)
 8000468:	f043 0301 	orr.w	r3, r3, #1
 800046c:	6093      	str	r3, [r2, #8]
}
 800046e:	bf00      	nop
 8000470:	46bd      	mov	sp, r7
 8000472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000476:	4770      	bx	lr
 8000478:	40023800 	.word	0x40023800
 800047c:	40020000 	.word	0x40020000
 8000480:	40012000 	.word	0x40012000
 8000484:	40012300 	.word	0x40012300

08000488 <start_conversion>:

void start_conversion(void)
{
 8000488:	b480      	push	{r7}
 800048a:	af00      	add	r7, sp, #0
	// Enable continuous conversion
	ADC1->CR2 |= CR2_CONT;
 800048c:	4b08      	ldr	r3, [pc, #32]	; (80004b0 <start_conversion+0x28>)
 800048e:	689b      	ldr	r3, [r3, #8]
 8000490:	4a07      	ldr	r2, [pc, #28]	; (80004b0 <start_conversion+0x28>)
 8000492:	f043 0301 	orr.w	r3, r3, #1
 8000496:	6093      	str	r3, [r2, #8]

	// Start ADC conversion
	//ADC1->CR2 |= 0;
	ADC1->CR2 |= CR2_SWSART;
 8000498:	4b05      	ldr	r3, [pc, #20]	; (80004b0 <start_conversion+0x28>)
 800049a:	689b      	ldr	r3, [r3, #8]
 800049c:	4a04      	ldr	r2, [pc, #16]	; (80004b0 <start_conversion+0x28>)
 800049e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80004a2:	6093      	str	r3, [r2, #8]
}
 80004a4:	bf00      	nop
 80004a6:	46bd      	mov	sp, r7
 80004a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ac:	4770      	bx	lr
 80004ae:	bf00      	nop
 80004b0:	40012000 	.word	0x40012000

080004b4 <adc_read>:

uint32_t adc_read(void)
{
 80004b4:	b480      	push	{r7}
 80004b6:	af00      	add	r7, sp, #0
	// Wait for conversion to be complete
	while(!(ADC1->SR & SR_EOC1)){}
 80004b8:	bf00      	nop
 80004ba:	4b06      	ldr	r3, [pc, #24]	; (80004d4 <adc_read+0x20>)
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	f003 0302 	and.w	r3, r3, #2
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d0f9      	beq.n	80004ba <adc_read+0x6>

	// Read conversion result
	return (ADC1->DR);
 80004c6:	4b03      	ldr	r3, [pc, #12]	; (80004d4 <adc_read+0x20>)
 80004c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80004ca:	4618      	mov	r0, r3
 80004cc:	46bd      	mov	sp, r7
 80004ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d2:	4770      	bx	lr
 80004d4:	40012000 	.word	0x40012000

080004d8 <main>:
#include "adc.h"

uint32_t sensor_value;

int main(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
	uart2_Rxtx_init();
 80004dc:	f7ff fee4 	bl	80002a8 <uart2_Rxtx_init>

	pa1_adc_int();
 80004e0:	f7ff ff90 	bl	8000404 <pa1_adc_int>

	while(1)
	{
		start_conversion();
 80004e4:	f7ff ffd0 	bl	8000488 <start_conversion>
		sensor_value = adc_read();
 80004e8:	f7ff ffe4 	bl	80004b4 <adc_read>
 80004ec:	4603      	mov	r3, r0
 80004ee:	4a04      	ldr	r2, [pc, #16]	; (8000500 <main+0x28>)
 80004f0:	6013      	str	r3, [r2, #0]
		printf("Sensor Value: %ld \n\r", sensor_value);
 80004f2:	4b03      	ldr	r3, [pc, #12]	; (8000500 <main+0x28>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	4619      	mov	r1, r3
 80004f8:	4802      	ldr	r0, [pc, #8]	; (8000504 <main+0x2c>)
 80004fa:	f000 f905 	bl	8000708 <iprintf>
		start_conversion();
 80004fe:	e7f1      	b.n	80004e4 <main+0xc>
 8000500:	20000080 	.word	0x20000080
 8000504:	0800163c 	.word	0x0800163c

08000508 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b086      	sub	sp, #24
 800050c:	af00      	add	r7, sp, #0
 800050e:	60f8      	str	r0, [r7, #12]
 8000510:	60b9      	str	r1, [r7, #8]
 8000512:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000514:	2300      	movs	r3, #0
 8000516:	617b      	str	r3, [r7, #20]
 8000518:	e00a      	b.n	8000530 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800051a:	f3af 8000 	nop.w
 800051e:	4601      	mov	r1, r0
 8000520:	68bb      	ldr	r3, [r7, #8]
 8000522:	1c5a      	adds	r2, r3, #1
 8000524:	60ba      	str	r2, [r7, #8]
 8000526:	b2ca      	uxtb	r2, r1
 8000528:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800052a:	697b      	ldr	r3, [r7, #20]
 800052c:	3301      	adds	r3, #1
 800052e:	617b      	str	r3, [r7, #20]
 8000530:	697a      	ldr	r2, [r7, #20]
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	429a      	cmp	r2, r3
 8000536:	dbf0      	blt.n	800051a <_read+0x12>
  }

  return len;
 8000538:	687b      	ldr	r3, [r7, #4]
}
 800053a:	4618      	mov	r0, r3
 800053c:	3718      	adds	r7, #24
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}

08000542 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000542:	b580      	push	{r7, lr}
 8000544:	b086      	sub	sp, #24
 8000546:	af00      	add	r7, sp, #0
 8000548:	60f8      	str	r0, [r7, #12]
 800054a:	60b9      	str	r1, [r7, #8]
 800054c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800054e:	2300      	movs	r3, #0
 8000550:	617b      	str	r3, [r7, #20]
 8000552:	e009      	b.n	8000568 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000554:	68bb      	ldr	r3, [r7, #8]
 8000556:	1c5a      	adds	r2, r3, #1
 8000558:	60ba      	str	r2, [r7, #8]
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	4618      	mov	r0, r3
 800055e:	f7ff fe97 	bl	8000290 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000562:	697b      	ldr	r3, [r7, #20]
 8000564:	3301      	adds	r3, #1
 8000566:	617b      	str	r3, [r7, #20]
 8000568:	697a      	ldr	r2, [r7, #20]
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	429a      	cmp	r2, r3
 800056e:	dbf1      	blt.n	8000554 <_write+0x12>
  }
  return len;
 8000570:	687b      	ldr	r3, [r7, #4]
}
 8000572:	4618      	mov	r0, r3
 8000574:	3718      	adds	r7, #24
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}

0800057a <_close>:

int _close(int file)
{
 800057a:	b480      	push	{r7}
 800057c:	b083      	sub	sp, #12
 800057e:	af00      	add	r7, sp, #0
 8000580:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000582:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000586:	4618      	mov	r0, r3
 8000588:	370c      	adds	r7, #12
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr

08000592 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000592:	b480      	push	{r7}
 8000594:	b083      	sub	sp, #12
 8000596:	af00      	add	r7, sp, #0
 8000598:	6078      	str	r0, [r7, #4]
 800059a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800059c:	683b      	ldr	r3, [r7, #0]
 800059e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80005a2:	605a      	str	r2, [r3, #4]
  return 0;
 80005a4:	2300      	movs	r3, #0
}
 80005a6:	4618      	mov	r0, r3
 80005a8:	370c      	adds	r7, #12
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr

080005b2 <_isatty>:

int _isatty(int file)
{
 80005b2:	b480      	push	{r7}
 80005b4:	b083      	sub	sp, #12
 80005b6:	af00      	add	r7, sp, #0
 80005b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80005ba:	2301      	movs	r3, #1
}
 80005bc:	4618      	mov	r0, r3
 80005be:	370c      	adds	r7, #12
 80005c0:	46bd      	mov	sp, r7
 80005c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c6:	4770      	bx	lr

080005c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b085      	sub	sp, #20
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	60f8      	str	r0, [r7, #12]
 80005d0:	60b9      	str	r1, [r7, #8]
 80005d2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80005d4:	2300      	movs	r3, #0
}
 80005d6:	4618      	mov	r0, r3
 80005d8:	3714      	adds	r7, #20
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
	...

080005e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b086      	sub	sp, #24
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005ec:	4a14      	ldr	r2, [pc, #80]	; (8000640 <_sbrk+0x5c>)
 80005ee:	4b15      	ldr	r3, [pc, #84]	; (8000644 <_sbrk+0x60>)
 80005f0:	1ad3      	subs	r3, r2, r3
 80005f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005f4:	697b      	ldr	r3, [r7, #20]
 80005f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005f8:	4b13      	ldr	r3, [pc, #76]	; (8000648 <_sbrk+0x64>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d102      	bne.n	8000606 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000600:	4b11      	ldr	r3, [pc, #68]	; (8000648 <_sbrk+0x64>)
 8000602:	4a12      	ldr	r2, [pc, #72]	; (800064c <_sbrk+0x68>)
 8000604:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000606:	4b10      	ldr	r3, [pc, #64]	; (8000648 <_sbrk+0x64>)
 8000608:	681a      	ldr	r2, [r3, #0]
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	4413      	add	r3, r2
 800060e:	693a      	ldr	r2, [r7, #16]
 8000610:	429a      	cmp	r2, r3
 8000612:	d207      	bcs.n	8000624 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000614:	f000 f846 	bl	80006a4 <__errno>
 8000618:	4603      	mov	r3, r0
 800061a:	220c      	movs	r2, #12
 800061c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800061e:	f04f 33ff 	mov.w	r3, #4294967295
 8000622:	e009      	b.n	8000638 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000624:	4b08      	ldr	r3, [pc, #32]	; (8000648 <_sbrk+0x64>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800062a:	4b07      	ldr	r3, [pc, #28]	; (8000648 <_sbrk+0x64>)
 800062c:	681a      	ldr	r2, [r3, #0]
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	4413      	add	r3, r2
 8000632:	4a05      	ldr	r2, [pc, #20]	; (8000648 <_sbrk+0x64>)
 8000634:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000636:	68fb      	ldr	r3, [r7, #12]
}
 8000638:	4618      	mov	r0, r3
 800063a:	3718      	adds	r7, #24
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	20020000 	.word	0x20020000
 8000644:	00000400 	.word	0x00000400
 8000648:	20000084 	.word	0x20000084
 800064c:	20000098 	.word	0x20000098

08000650 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000650:	480d      	ldr	r0, [pc, #52]	; (8000688 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000652:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000654:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000658:	480c      	ldr	r0, [pc, #48]	; (800068c <LoopForever+0x6>)
  ldr r1, =_edata
 800065a:	490d      	ldr	r1, [pc, #52]	; (8000690 <LoopForever+0xa>)
  ldr r2, =_sidata
 800065c:	4a0d      	ldr	r2, [pc, #52]	; (8000694 <LoopForever+0xe>)
  movs r3, #0
 800065e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000660:	e002      	b.n	8000668 <LoopCopyDataInit>

08000662 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000662:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000664:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000666:	3304      	adds	r3, #4

08000668 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000668:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800066a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800066c:	d3f9      	bcc.n	8000662 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800066e:	4a0a      	ldr	r2, [pc, #40]	; (8000698 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000670:	4c0a      	ldr	r4, [pc, #40]	; (800069c <LoopForever+0x16>)
  movs r3, #0
 8000672:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000674:	e001      	b.n	800067a <LoopFillZerobss>

08000676 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000676:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000678:	3204      	adds	r2, #4

0800067a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800067a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800067c:	d3fb      	bcc.n	8000676 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800067e:	f000 f817 	bl	80006b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000682:	f7ff ff29 	bl	80004d8 <main>

08000686 <LoopForever>:

LoopForever:
  b LoopForever
 8000686:	e7fe      	b.n	8000686 <LoopForever>
  ldr   r0, =_estack
 8000688:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800068c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000690:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000694:	080016f4 	.word	0x080016f4
  ldr r2, =_sbss
 8000698:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 800069c:	20000098 	.word	0x20000098

080006a0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006a0:	e7fe      	b.n	80006a0 <ADC_IRQHandler>
	...

080006a4 <__errno>:
 80006a4:	4b01      	ldr	r3, [pc, #4]	; (80006ac <__errno+0x8>)
 80006a6:	6818      	ldr	r0, [r3, #0]
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop
 80006ac:	20000000 	.word	0x20000000

080006b0 <__libc_init_array>:
 80006b0:	b570      	push	{r4, r5, r6, lr}
 80006b2:	4d0d      	ldr	r5, [pc, #52]	; (80006e8 <__libc_init_array+0x38>)
 80006b4:	4c0d      	ldr	r4, [pc, #52]	; (80006ec <__libc_init_array+0x3c>)
 80006b6:	1b64      	subs	r4, r4, r5
 80006b8:	10a4      	asrs	r4, r4, #2
 80006ba:	2600      	movs	r6, #0
 80006bc:	42a6      	cmp	r6, r4
 80006be:	d109      	bne.n	80006d4 <__libc_init_array+0x24>
 80006c0:	4d0b      	ldr	r5, [pc, #44]	; (80006f0 <__libc_init_array+0x40>)
 80006c2:	4c0c      	ldr	r4, [pc, #48]	; (80006f4 <__libc_init_array+0x44>)
 80006c4:	f000 ffae 	bl	8001624 <_init>
 80006c8:	1b64      	subs	r4, r4, r5
 80006ca:	10a4      	asrs	r4, r4, #2
 80006cc:	2600      	movs	r6, #0
 80006ce:	42a6      	cmp	r6, r4
 80006d0:	d105      	bne.n	80006de <__libc_init_array+0x2e>
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80006d8:	4798      	blx	r3
 80006da:	3601      	adds	r6, #1
 80006dc:	e7ee      	b.n	80006bc <__libc_init_array+0xc>
 80006de:	f855 3b04 	ldr.w	r3, [r5], #4
 80006e2:	4798      	blx	r3
 80006e4:	3601      	adds	r6, #1
 80006e6:	e7f2      	b.n	80006ce <__libc_init_array+0x1e>
 80006e8:	080016ec 	.word	0x080016ec
 80006ec:	080016ec 	.word	0x080016ec
 80006f0:	080016ec 	.word	0x080016ec
 80006f4:	080016f0 	.word	0x080016f0

080006f8 <memset>:
 80006f8:	4402      	add	r2, r0
 80006fa:	4603      	mov	r3, r0
 80006fc:	4293      	cmp	r3, r2
 80006fe:	d100      	bne.n	8000702 <memset+0xa>
 8000700:	4770      	bx	lr
 8000702:	f803 1b01 	strb.w	r1, [r3], #1
 8000706:	e7f9      	b.n	80006fc <memset+0x4>

08000708 <iprintf>:
 8000708:	b40f      	push	{r0, r1, r2, r3}
 800070a:	4b0a      	ldr	r3, [pc, #40]	; (8000734 <iprintf+0x2c>)
 800070c:	b513      	push	{r0, r1, r4, lr}
 800070e:	681c      	ldr	r4, [r3, #0]
 8000710:	b124      	cbz	r4, 800071c <iprintf+0x14>
 8000712:	69a3      	ldr	r3, [r4, #24]
 8000714:	b913      	cbnz	r3, 800071c <iprintf+0x14>
 8000716:	4620      	mov	r0, r4
 8000718:	f000 f866 	bl	80007e8 <__sinit>
 800071c:	ab05      	add	r3, sp, #20
 800071e:	9a04      	ldr	r2, [sp, #16]
 8000720:	68a1      	ldr	r1, [r4, #8]
 8000722:	9301      	str	r3, [sp, #4]
 8000724:	4620      	mov	r0, r4
 8000726:	f000 f9bd 	bl	8000aa4 <_vfiprintf_r>
 800072a:	b002      	add	sp, #8
 800072c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000730:	b004      	add	sp, #16
 8000732:	4770      	bx	lr
 8000734:	20000000 	.word	0x20000000

08000738 <std>:
 8000738:	2300      	movs	r3, #0
 800073a:	b510      	push	{r4, lr}
 800073c:	4604      	mov	r4, r0
 800073e:	e9c0 3300 	strd	r3, r3, [r0]
 8000742:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000746:	6083      	str	r3, [r0, #8]
 8000748:	8181      	strh	r1, [r0, #12]
 800074a:	6643      	str	r3, [r0, #100]	; 0x64
 800074c:	81c2      	strh	r2, [r0, #14]
 800074e:	6183      	str	r3, [r0, #24]
 8000750:	4619      	mov	r1, r3
 8000752:	2208      	movs	r2, #8
 8000754:	305c      	adds	r0, #92	; 0x5c
 8000756:	f7ff ffcf 	bl	80006f8 <memset>
 800075a:	4b05      	ldr	r3, [pc, #20]	; (8000770 <std+0x38>)
 800075c:	6263      	str	r3, [r4, #36]	; 0x24
 800075e:	4b05      	ldr	r3, [pc, #20]	; (8000774 <std+0x3c>)
 8000760:	62a3      	str	r3, [r4, #40]	; 0x28
 8000762:	4b05      	ldr	r3, [pc, #20]	; (8000778 <std+0x40>)
 8000764:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000766:	4b05      	ldr	r3, [pc, #20]	; (800077c <std+0x44>)
 8000768:	6224      	str	r4, [r4, #32]
 800076a:	6323      	str	r3, [r4, #48]	; 0x30
 800076c:	bd10      	pop	{r4, pc}
 800076e:	bf00      	nop
 8000770:	0800104d 	.word	0x0800104d
 8000774:	0800106f 	.word	0x0800106f
 8000778:	080010a7 	.word	0x080010a7
 800077c:	080010cb 	.word	0x080010cb

08000780 <_cleanup_r>:
 8000780:	4901      	ldr	r1, [pc, #4]	; (8000788 <_cleanup_r+0x8>)
 8000782:	f000 b8af 	b.w	80008e4 <_fwalk_reent>
 8000786:	bf00      	nop
 8000788:	080013a5 	.word	0x080013a5

0800078c <__sfmoreglue>:
 800078c:	b570      	push	{r4, r5, r6, lr}
 800078e:	2268      	movs	r2, #104	; 0x68
 8000790:	1e4d      	subs	r5, r1, #1
 8000792:	4355      	muls	r5, r2
 8000794:	460e      	mov	r6, r1
 8000796:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800079a:	f000 f8e5 	bl	8000968 <_malloc_r>
 800079e:	4604      	mov	r4, r0
 80007a0:	b140      	cbz	r0, 80007b4 <__sfmoreglue+0x28>
 80007a2:	2100      	movs	r1, #0
 80007a4:	e9c0 1600 	strd	r1, r6, [r0]
 80007a8:	300c      	adds	r0, #12
 80007aa:	60a0      	str	r0, [r4, #8]
 80007ac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80007b0:	f7ff ffa2 	bl	80006f8 <memset>
 80007b4:	4620      	mov	r0, r4
 80007b6:	bd70      	pop	{r4, r5, r6, pc}

080007b8 <__sfp_lock_acquire>:
 80007b8:	4801      	ldr	r0, [pc, #4]	; (80007c0 <__sfp_lock_acquire+0x8>)
 80007ba:	f000 b8b3 	b.w	8000924 <__retarget_lock_acquire_recursive>
 80007be:	bf00      	nop
 80007c0:	20000089 	.word	0x20000089

080007c4 <__sfp_lock_release>:
 80007c4:	4801      	ldr	r0, [pc, #4]	; (80007cc <__sfp_lock_release+0x8>)
 80007c6:	f000 b8ae 	b.w	8000926 <__retarget_lock_release_recursive>
 80007ca:	bf00      	nop
 80007cc:	20000089 	.word	0x20000089

080007d0 <__sinit_lock_acquire>:
 80007d0:	4801      	ldr	r0, [pc, #4]	; (80007d8 <__sinit_lock_acquire+0x8>)
 80007d2:	f000 b8a7 	b.w	8000924 <__retarget_lock_acquire_recursive>
 80007d6:	bf00      	nop
 80007d8:	2000008a 	.word	0x2000008a

080007dc <__sinit_lock_release>:
 80007dc:	4801      	ldr	r0, [pc, #4]	; (80007e4 <__sinit_lock_release+0x8>)
 80007de:	f000 b8a2 	b.w	8000926 <__retarget_lock_release_recursive>
 80007e2:	bf00      	nop
 80007e4:	2000008a 	.word	0x2000008a

080007e8 <__sinit>:
 80007e8:	b510      	push	{r4, lr}
 80007ea:	4604      	mov	r4, r0
 80007ec:	f7ff fff0 	bl	80007d0 <__sinit_lock_acquire>
 80007f0:	69a3      	ldr	r3, [r4, #24]
 80007f2:	b11b      	cbz	r3, 80007fc <__sinit+0x14>
 80007f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007f8:	f7ff bff0 	b.w	80007dc <__sinit_lock_release>
 80007fc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000800:	6523      	str	r3, [r4, #80]	; 0x50
 8000802:	4b13      	ldr	r3, [pc, #76]	; (8000850 <__sinit+0x68>)
 8000804:	4a13      	ldr	r2, [pc, #76]	; (8000854 <__sinit+0x6c>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	62a2      	str	r2, [r4, #40]	; 0x28
 800080a:	42a3      	cmp	r3, r4
 800080c:	bf04      	itt	eq
 800080e:	2301      	moveq	r3, #1
 8000810:	61a3      	streq	r3, [r4, #24]
 8000812:	4620      	mov	r0, r4
 8000814:	f000 f820 	bl	8000858 <__sfp>
 8000818:	6060      	str	r0, [r4, #4]
 800081a:	4620      	mov	r0, r4
 800081c:	f000 f81c 	bl	8000858 <__sfp>
 8000820:	60a0      	str	r0, [r4, #8]
 8000822:	4620      	mov	r0, r4
 8000824:	f000 f818 	bl	8000858 <__sfp>
 8000828:	2200      	movs	r2, #0
 800082a:	60e0      	str	r0, [r4, #12]
 800082c:	2104      	movs	r1, #4
 800082e:	6860      	ldr	r0, [r4, #4]
 8000830:	f7ff ff82 	bl	8000738 <std>
 8000834:	68a0      	ldr	r0, [r4, #8]
 8000836:	2201      	movs	r2, #1
 8000838:	2109      	movs	r1, #9
 800083a:	f7ff ff7d 	bl	8000738 <std>
 800083e:	68e0      	ldr	r0, [r4, #12]
 8000840:	2202      	movs	r2, #2
 8000842:	2112      	movs	r1, #18
 8000844:	f7ff ff78 	bl	8000738 <std>
 8000848:	2301      	movs	r3, #1
 800084a:	61a3      	str	r3, [r4, #24]
 800084c:	e7d2      	b.n	80007f4 <__sinit+0xc>
 800084e:	bf00      	nop
 8000850:	08001654 	.word	0x08001654
 8000854:	08000781 	.word	0x08000781

08000858 <__sfp>:
 8000858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800085a:	4607      	mov	r7, r0
 800085c:	f7ff ffac 	bl	80007b8 <__sfp_lock_acquire>
 8000860:	4b1e      	ldr	r3, [pc, #120]	; (80008dc <__sfp+0x84>)
 8000862:	681e      	ldr	r6, [r3, #0]
 8000864:	69b3      	ldr	r3, [r6, #24]
 8000866:	b913      	cbnz	r3, 800086e <__sfp+0x16>
 8000868:	4630      	mov	r0, r6
 800086a:	f7ff ffbd 	bl	80007e8 <__sinit>
 800086e:	3648      	adds	r6, #72	; 0x48
 8000870:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000874:	3b01      	subs	r3, #1
 8000876:	d503      	bpl.n	8000880 <__sfp+0x28>
 8000878:	6833      	ldr	r3, [r6, #0]
 800087a:	b30b      	cbz	r3, 80008c0 <__sfp+0x68>
 800087c:	6836      	ldr	r6, [r6, #0]
 800087e:	e7f7      	b.n	8000870 <__sfp+0x18>
 8000880:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000884:	b9d5      	cbnz	r5, 80008bc <__sfp+0x64>
 8000886:	4b16      	ldr	r3, [pc, #88]	; (80008e0 <__sfp+0x88>)
 8000888:	60e3      	str	r3, [r4, #12]
 800088a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800088e:	6665      	str	r5, [r4, #100]	; 0x64
 8000890:	f000 f847 	bl	8000922 <__retarget_lock_init_recursive>
 8000894:	f7ff ff96 	bl	80007c4 <__sfp_lock_release>
 8000898:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800089c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80008a0:	6025      	str	r5, [r4, #0]
 80008a2:	61a5      	str	r5, [r4, #24]
 80008a4:	2208      	movs	r2, #8
 80008a6:	4629      	mov	r1, r5
 80008a8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80008ac:	f7ff ff24 	bl	80006f8 <memset>
 80008b0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80008b4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80008b8:	4620      	mov	r0, r4
 80008ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80008bc:	3468      	adds	r4, #104	; 0x68
 80008be:	e7d9      	b.n	8000874 <__sfp+0x1c>
 80008c0:	2104      	movs	r1, #4
 80008c2:	4638      	mov	r0, r7
 80008c4:	f7ff ff62 	bl	800078c <__sfmoreglue>
 80008c8:	4604      	mov	r4, r0
 80008ca:	6030      	str	r0, [r6, #0]
 80008cc:	2800      	cmp	r0, #0
 80008ce:	d1d5      	bne.n	800087c <__sfp+0x24>
 80008d0:	f7ff ff78 	bl	80007c4 <__sfp_lock_release>
 80008d4:	230c      	movs	r3, #12
 80008d6:	603b      	str	r3, [r7, #0]
 80008d8:	e7ee      	b.n	80008b8 <__sfp+0x60>
 80008da:	bf00      	nop
 80008dc:	08001654 	.word	0x08001654
 80008e0:	ffff0001 	.word	0xffff0001

080008e4 <_fwalk_reent>:
 80008e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80008e8:	4606      	mov	r6, r0
 80008ea:	4688      	mov	r8, r1
 80008ec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80008f0:	2700      	movs	r7, #0
 80008f2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80008f6:	f1b9 0901 	subs.w	r9, r9, #1
 80008fa:	d505      	bpl.n	8000908 <_fwalk_reent+0x24>
 80008fc:	6824      	ldr	r4, [r4, #0]
 80008fe:	2c00      	cmp	r4, #0
 8000900:	d1f7      	bne.n	80008f2 <_fwalk_reent+0xe>
 8000902:	4638      	mov	r0, r7
 8000904:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000908:	89ab      	ldrh	r3, [r5, #12]
 800090a:	2b01      	cmp	r3, #1
 800090c:	d907      	bls.n	800091e <_fwalk_reent+0x3a>
 800090e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000912:	3301      	adds	r3, #1
 8000914:	d003      	beq.n	800091e <_fwalk_reent+0x3a>
 8000916:	4629      	mov	r1, r5
 8000918:	4630      	mov	r0, r6
 800091a:	47c0      	blx	r8
 800091c:	4307      	orrs	r7, r0
 800091e:	3568      	adds	r5, #104	; 0x68
 8000920:	e7e9      	b.n	80008f6 <_fwalk_reent+0x12>

08000922 <__retarget_lock_init_recursive>:
 8000922:	4770      	bx	lr

08000924 <__retarget_lock_acquire_recursive>:
 8000924:	4770      	bx	lr

08000926 <__retarget_lock_release_recursive>:
 8000926:	4770      	bx	lr

08000928 <sbrk_aligned>:
 8000928:	b570      	push	{r4, r5, r6, lr}
 800092a:	4e0e      	ldr	r6, [pc, #56]	; (8000964 <sbrk_aligned+0x3c>)
 800092c:	460c      	mov	r4, r1
 800092e:	6831      	ldr	r1, [r6, #0]
 8000930:	4605      	mov	r5, r0
 8000932:	b911      	cbnz	r1, 800093a <sbrk_aligned+0x12>
 8000934:	f000 fb7a 	bl	800102c <_sbrk_r>
 8000938:	6030      	str	r0, [r6, #0]
 800093a:	4621      	mov	r1, r4
 800093c:	4628      	mov	r0, r5
 800093e:	f000 fb75 	bl	800102c <_sbrk_r>
 8000942:	1c43      	adds	r3, r0, #1
 8000944:	d00a      	beq.n	800095c <sbrk_aligned+0x34>
 8000946:	1cc4      	adds	r4, r0, #3
 8000948:	f024 0403 	bic.w	r4, r4, #3
 800094c:	42a0      	cmp	r0, r4
 800094e:	d007      	beq.n	8000960 <sbrk_aligned+0x38>
 8000950:	1a21      	subs	r1, r4, r0
 8000952:	4628      	mov	r0, r5
 8000954:	f000 fb6a 	bl	800102c <_sbrk_r>
 8000958:	3001      	adds	r0, #1
 800095a:	d101      	bne.n	8000960 <sbrk_aligned+0x38>
 800095c:	f04f 34ff 	mov.w	r4, #4294967295
 8000960:	4620      	mov	r0, r4
 8000962:	bd70      	pop	{r4, r5, r6, pc}
 8000964:	20000090 	.word	0x20000090

08000968 <_malloc_r>:
 8000968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800096c:	1ccd      	adds	r5, r1, #3
 800096e:	f025 0503 	bic.w	r5, r5, #3
 8000972:	3508      	adds	r5, #8
 8000974:	2d0c      	cmp	r5, #12
 8000976:	bf38      	it	cc
 8000978:	250c      	movcc	r5, #12
 800097a:	2d00      	cmp	r5, #0
 800097c:	4607      	mov	r7, r0
 800097e:	db01      	blt.n	8000984 <_malloc_r+0x1c>
 8000980:	42a9      	cmp	r1, r5
 8000982:	d905      	bls.n	8000990 <_malloc_r+0x28>
 8000984:	230c      	movs	r3, #12
 8000986:	603b      	str	r3, [r7, #0]
 8000988:	2600      	movs	r6, #0
 800098a:	4630      	mov	r0, r6
 800098c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000990:	4e2e      	ldr	r6, [pc, #184]	; (8000a4c <_malloc_r+0xe4>)
 8000992:	f000 fdbb 	bl	800150c <__malloc_lock>
 8000996:	6833      	ldr	r3, [r6, #0]
 8000998:	461c      	mov	r4, r3
 800099a:	bb34      	cbnz	r4, 80009ea <_malloc_r+0x82>
 800099c:	4629      	mov	r1, r5
 800099e:	4638      	mov	r0, r7
 80009a0:	f7ff ffc2 	bl	8000928 <sbrk_aligned>
 80009a4:	1c43      	adds	r3, r0, #1
 80009a6:	4604      	mov	r4, r0
 80009a8:	d14d      	bne.n	8000a46 <_malloc_r+0xde>
 80009aa:	6834      	ldr	r4, [r6, #0]
 80009ac:	4626      	mov	r6, r4
 80009ae:	2e00      	cmp	r6, #0
 80009b0:	d140      	bne.n	8000a34 <_malloc_r+0xcc>
 80009b2:	6823      	ldr	r3, [r4, #0]
 80009b4:	4631      	mov	r1, r6
 80009b6:	4638      	mov	r0, r7
 80009b8:	eb04 0803 	add.w	r8, r4, r3
 80009bc:	f000 fb36 	bl	800102c <_sbrk_r>
 80009c0:	4580      	cmp	r8, r0
 80009c2:	d13a      	bne.n	8000a3a <_malloc_r+0xd2>
 80009c4:	6821      	ldr	r1, [r4, #0]
 80009c6:	3503      	adds	r5, #3
 80009c8:	1a6d      	subs	r5, r5, r1
 80009ca:	f025 0503 	bic.w	r5, r5, #3
 80009ce:	3508      	adds	r5, #8
 80009d0:	2d0c      	cmp	r5, #12
 80009d2:	bf38      	it	cc
 80009d4:	250c      	movcc	r5, #12
 80009d6:	4629      	mov	r1, r5
 80009d8:	4638      	mov	r0, r7
 80009da:	f7ff ffa5 	bl	8000928 <sbrk_aligned>
 80009de:	3001      	adds	r0, #1
 80009e0:	d02b      	beq.n	8000a3a <_malloc_r+0xd2>
 80009e2:	6823      	ldr	r3, [r4, #0]
 80009e4:	442b      	add	r3, r5
 80009e6:	6023      	str	r3, [r4, #0]
 80009e8:	e00e      	b.n	8000a08 <_malloc_r+0xa0>
 80009ea:	6822      	ldr	r2, [r4, #0]
 80009ec:	1b52      	subs	r2, r2, r5
 80009ee:	d41e      	bmi.n	8000a2e <_malloc_r+0xc6>
 80009f0:	2a0b      	cmp	r2, #11
 80009f2:	d916      	bls.n	8000a22 <_malloc_r+0xba>
 80009f4:	1961      	adds	r1, r4, r5
 80009f6:	42a3      	cmp	r3, r4
 80009f8:	6025      	str	r5, [r4, #0]
 80009fa:	bf18      	it	ne
 80009fc:	6059      	strne	r1, [r3, #4]
 80009fe:	6863      	ldr	r3, [r4, #4]
 8000a00:	bf08      	it	eq
 8000a02:	6031      	streq	r1, [r6, #0]
 8000a04:	5162      	str	r2, [r4, r5]
 8000a06:	604b      	str	r3, [r1, #4]
 8000a08:	4638      	mov	r0, r7
 8000a0a:	f104 060b 	add.w	r6, r4, #11
 8000a0e:	f000 fd83 	bl	8001518 <__malloc_unlock>
 8000a12:	f026 0607 	bic.w	r6, r6, #7
 8000a16:	1d23      	adds	r3, r4, #4
 8000a18:	1af2      	subs	r2, r6, r3
 8000a1a:	d0b6      	beq.n	800098a <_malloc_r+0x22>
 8000a1c:	1b9b      	subs	r3, r3, r6
 8000a1e:	50a3      	str	r3, [r4, r2]
 8000a20:	e7b3      	b.n	800098a <_malloc_r+0x22>
 8000a22:	6862      	ldr	r2, [r4, #4]
 8000a24:	42a3      	cmp	r3, r4
 8000a26:	bf0c      	ite	eq
 8000a28:	6032      	streq	r2, [r6, #0]
 8000a2a:	605a      	strne	r2, [r3, #4]
 8000a2c:	e7ec      	b.n	8000a08 <_malloc_r+0xa0>
 8000a2e:	4623      	mov	r3, r4
 8000a30:	6864      	ldr	r4, [r4, #4]
 8000a32:	e7b2      	b.n	800099a <_malloc_r+0x32>
 8000a34:	4634      	mov	r4, r6
 8000a36:	6876      	ldr	r6, [r6, #4]
 8000a38:	e7b9      	b.n	80009ae <_malloc_r+0x46>
 8000a3a:	230c      	movs	r3, #12
 8000a3c:	603b      	str	r3, [r7, #0]
 8000a3e:	4638      	mov	r0, r7
 8000a40:	f000 fd6a 	bl	8001518 <__malloc_unlock>
 8000a44:	e7a1      	b.n	800098a <_malloc_r+0x22>
 8000a46:	6025      	str	r5, [r4, #0]
 8000a48:	e7de      	b.n	8000a08 <_malloc_r+0xa0>
 8000a4a:	bf00      	nop
 8000a4c:	2000008c 	.word	0x2000008c

08000a50 <__sfputc_r>:
 8000a50:	6893      	ldr	r3, [r2, #8]
 8000a52:	3b01      	subs	r3, #1
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	b410      	push	{r4}
 8000a58:	6093      	str	r3, [r2, #8]
 8000a5a:	da08      	bge.n	8000a6e <__sfputc_r+0x1e>
 8000a5c:	6994      	ldr	r4, [r2, #24]
 8000a5e:	42a3      	cmp	r3, r4
 8000a60:	db01      	blt.n	8000a66 <__sfputc_r+0x16>
 8000a62:	290a      	cmp	r1, #10
 8000a64:	d103      	bne.n	8000a6e <__sfputc_r+0x1e>
 8000a66:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000a6a:	f000 bb33 	b.w	80010d4 <__swbuf_r>
 8000a6e:	6813      	ldr	r3, [r2, #0]
 8000a70:	1c58      	adds	r0, r3, #1
 8000a72:	6010      	str	r0, [r2, #0]
 8000a74:	7019      	strb	r1, [r3, #0]
 8000a76:	4608      	mov	r0, r1
 8000a78:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000a7c:	4770      	bx	lr

08000a7e <__sfputs_r>:
 8000a7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a80:	4606      	mov	r6, r0
 8000a82:	460f      	mov	r7, r1
 8000a84:	4614      	mov	r4, r2
 8000a86:	18d5      	adds	r5, r2, r3
 8000a88:	42ac      	cmp	r4, r5
 8000a8a:	d101      	bne.n	8000a90 <__sfputs_r+0x12>
 8000a8c:	2000      	movs	r0, #0
 8000a8e:	e007      	b.n	8000aa0 <__sfputs_r+0x22>
 8000a90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000a94:	463a      	mov	r2, r7
 8000a96:	4630      	mov	r0, r6
 8000a98:	f7ff ffda 	bl	8000a50 <__sfputc_r>
 8000a9c:	1c43      	adds	r3, r0, #1
 8000a9e:	d1f3      	bne.n	8000a88 <__sfputs_r+0xa>
 8000aa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000aa4 <_vfiprintf_r>:
 8000aa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000aa8:	460d      	mov	r5, r1
 8000aaa:	b09d      	sub	sp, #116	; 0x74
 8000aac:	4614      	mov	r4, r2
 8000aae:	4698      	mov	r8, r3
 8000ab0:	4606      	mov	r6, r0
 8000ab2:	b118      	cbz	r0, 8000abc <_vfiprintf_r+0x18>
 8000ab4:	6983      	ldr	r3, [r0, #24]
 8000ab6:	b90b      	cbnz	r3, 8000abc <_vfiprintf_r+0x18>
 8000ab8:	f7ff fe96 	bl	80007e8 <__sinit>
 8000abc:	4b89      	ldr	r3, [pc, #548]	; (8000ce4 <_vfiprintf_r+0x240>)
 8000abe:	429d      	cmp	r5, r3
 8000ac0:	d11b      	bne.n	8000afa <_vfiprintf_r+0x56>
 8000ac2:	6875      	ldr	r5, [r6, #4]
 8000ac4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000ac6:	07d9      	lsls	r1, r3, #31
 8000ac8:	d405      	bmi.n	8000ad6 <_vfiprintf_r+0x32>
 8000aca:	89ab      	ldrh	r3, [r5, #12]
 8000acc:	059a      	lsls	r2, r3, #22
 8000ace:	d402      	bmi.n	8000ad6 <_vfiprintf_r+0x32>
 8000ad0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000ad2:	f7ff ff27 	bl	8000924 <__retarget_lock_acquire_recursive>
 8000ad6:	89ab      	ldrh	r3, [r5, #12]
 8000ad8:	071b      	lsls	r3, r3, #28
 8000ada:	d501      	bpl.n	8000ae0 <_vfiprintf_r+0x3c>
 8000adc:	692b      	ldr	r3, [r5, #16]
 8000ade:	b9eb      	cbnz	r3, 8000b1c <_vfiprintf_r+0x78>
 8000ae0:	4629      	mov	r1, r5
 8000ae2:	4630      	mov	r0, r6
 8000ae4:	f000 fb5a 	bl	800119c <__swsetup_r>
 8000ae8:	b1c0      	cbz	r0, 8000b1c <_vfiprintf_r+0x78>
 8000aea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000aec:	07dc      	lsls	r4, r3, #31
 8000aee:	d50e      	bpl.n	8000b0e <_vfiprintf_r+0x6a>
 8000af0:	f04f 30ff 	mov.w	r0, #4294967295
 8000af4:	b01d      	add	sp, #116	; 0x74
 8000af6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000afa:	4b7b      	ldr	r3, [pc, #492]	; (8000ce8 <_vfiprintf_r+0x244>)
 8000afc:	429d      	cmp	r5, r3
 8000afe:	d101      	bne.n	8000b04 <_vfiprintf_r+0x60>
 8000b00:	68b5      	ldr	r5, [r6, #8]
 8000b02:	e7df      	b.n	8000ac4 <_vfiprintf_r+0x20>
 8000b04:	4b79      	ldr	r3, [pc, #484]	; (8000cec <_vfiprintf_r+0x248>)
 8000b06:	429d      	cmp	r5, r3
 8000b08:	bf08      	it	eq
 8000b0a:	68f5      	ldreq	r5, [r6, #12]
 8000b0c:	e7da      	b.n	8000ac4 <_vfiprintf_r+0x20>
 8000b0e:	89ab      	ldrh	r3, [r5, #12]
 8000b10:	0598      	lsls	r0, r3, #22
 8000b12:	d4ed      	bmi.n	8000af0 <_vfiprintf_r+0x4c>
 8000b14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000b16:	f7ff ff06 	bl	8000926 <__retarget_lock_release_recursive>
 8000b1a:	e7e9      	b.n	8000af0 <_vfiprintf_r+0x4c>
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	9309      	str	r3, [sp, #36]	; 0x24
 8000b20:	2320      	movs	r3, #32
 8000b22:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000b26:	f8cd 800c 	str.w	r8, [sp, #12]
 8000b2a:	2330      	movs	r3, #48	; 0x30
 8000b2c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8000cf0 <_vfiprintf_r+0x24c>
 8000b30:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000b34:	f04f 0901 	mov.w	r9, #1
 8000b38:	4623      	mov	r3, r4
 8000b3a:	469a      	mov	sl, r3
 8000b3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000b40:	b10a      	cbz	r2, 8000b46 <_vfiprintf_r+0xa2>
 8000b42:	2a25      	cmp	r2, #37	; 0x25
 8000b44:	d1f9      	bne.n	8000b3a <_vfiprintf_r+0x96>
 8000b46:	ebba 0b04 	subs.w	fp, sl, r4
 8000b4a:	d00b      	beq.n	8000b64 <_vfiprintf_r+0xc0>
 8000b4c:	465b      	mov	r3, fp
 8000b4e:	4622      	mov	r2, r4
 8000b50:	4629      	mov	r1, r5
 8000b52:	4630      	mov	r0, r6
 8000b54:	f7ff ff93 	bl	8000a7e <__sfputs_r>
 8000b58:	3001      	adds	r0, #1
 8000b5a:	f000 80aa 	beq.w	8000cb2 <_vfiprintf_r+0x20e>
 8000b5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000b60:	445a      	add	r2, fp
 8000b62:	9209      	str	r2, [sp, #36]	; 0x24
 8000b64:	f89a 3000 	ldrb.w	r3, [sl]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	f000 80a2 	beq.w	8000cb2 <_vfiprintf_r+0x20e>
 8000b6e:	2300      	movs	r3, #0
 8000b70:	f04f 32ff 	mov.w	r2, #4294967295
 8000b74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000b78:	f10a 0a01 	add.w	sl, sl, #1
 8000b7c:	9304      	str	r3, [sp, #16]
 8000b7e:	9307      	str	r3, [sp, #28]
 8000b80:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000b84:	931a      	str	r3, [sp, #104]	; 0x68
 8000b86:	4654      	mov	r4, sl
 8000b88:	2205      	movs	r2, #5
 8000b8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000b8e:	4858      	ldr	r0, [pc, #352]	; (8000cf0 <_vfiprintf_r+0x24c>)
 8000b90:	f7ff fb2e 	bl	80001f0 <memchr>
 8000b94:	9a04      	ldr	r2, [sp, #16]
 8000b96:	b9d8      	cbnz	r0, 8000bd0 <_vfiprintf_r+0x12c>
 8000b98:	06d1      	lsls	r1, r2, #27
 8000b9a:	bf44      	itt	mi
 8000b9c:	2320      	movmi	r3, #32
 8000b9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000ba2:	0713      	lsls	r3, r2, #28
 8000ba4:	bf44      	itt	mi
 8000ba6:	232b      	movmi	r3, #43	; 0x2b
 8000ba8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000bac:	f89a 3000 	ldrb.w	r3, [sl]
 8000bb0:	2b2a      	cmp	r3, #42	; 0x2a
 8000bb2:	d015      	beq.n	8000be0 <_vfiprintf_r+0x13c>
 8000bb4:	9a07      	ldr	r2, [sp, #28]
 8000bb6:	4654      	mov	r4, sl
 8000bb8:	2000      	movs	r0, #0
 8000bba:	f04f 0c0a 	mov.w	ip, #10
 8000bbe:	4621      	mov	r1, r4
 8000bc0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000bc4:	3b30      	subs	r3, #48	; 0x30
 8000bc6:	2b09      	cmp	r3, #9
 8000bc8:	d94e      	bls.n	8000c68 <_vfiprintf_r+0x1c4>
 8000bca:	b1b0      	cbz	r0, 8000bfa <_vfiprintf_r+0x156>
 8000bcc:	9207      	str	r2, [sp, #28]
 8000bce:	e014      	b.n	8000bfa <_vfiprintf_r+0x156>
 8000bd0:	eba0 0308 	sub.w	r3, r0, r8
 8000bd4:	fa09 f303 	lsl.w	r3, r9, r3
 8000bd8:	4313      	orrs	r3, r2
 8000bda:	9304      	str	r3, [sp, #16]
 8000bdc:	46a2      	mov	sl, r4
 8000bde:	e7d2      	b.n	8000b86 <_vfiprintf_r+0xe2>
 8000be0:	9b03      	ldr	r3, [sp, #12]
 8000be2:	1d19      	adds	r1, r3, #4
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	9103      	str	r1, [sp, #12]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	bfbb      	ittet	lt
 8000bec:	425b      	neglt	r3, r3
 8000bee:	f042 0202 	orrlt.w	r2, r2, #2
 8000bf2:	9307      	strge	r3, [sp, #28]
 8000bf4:	9307      	strlt	r3, [sp, #28]
 8000bf6:	bfb8      	it	lt
 8000bf8:	9204      	strlt	r2, [sp, #16]
 8000bfa:	7823      	ldrb	r3, [r4, #0]
 8000bfc:	2b2e      	cmp	r3, #46	; 0x2e
 8000bfe:	d10c      	bne.n	8000c1a <_vfiprintf_r+0x176>
 8000c00:	7863      	ldrb	r3, [r4, #1]
 8000c02:	2b2a      	cmp	r3, #42	; 0x2a
 8000c04:	d135      	bne.n	8000c72 <_vfiprintf_r+0x1ce>
 8000c06:	9b03      	ldr	r3, [sp, #12]
 8000c08:	1d1a      	adds	r2, r3, #4
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	9203      	str	r2, [sp, #12]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	bfb8      	it	lt
 8000c12:	f04f 33ff 	movlt.w	r3, #4294967295
 8000c16:	3402      	adds	r4, #2
 8000c18:	9305      	str	r3, [sp, #20]
 8000c1a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8000d00 <_vfiprintf_r+0x25c>
 8000c1e:	7821      	ldrb	r1, [r4, #0]
 8000c20:	2203      	movs	r2, #3
 8000c22:	4650      	mov	r0, sl
 8000c24:	f7ff fae4 	bl	80001f0 <memchr>
 8000c28:	b140      	cbz	r0, 8000c3c <_vfiprintf_r+0x198>
 8000c2a:	2340      	movs	r3, #64	; 0x40
 8000c2c:	eba0 000a 	sub.w	r0, r0, sl
 8000c30:	fa03 f000 	lsl.w	r0, r3, r0
 8000c34:	9b04      	ldr	r3, [sp, #16]
 8000c36:	4303      	orrs	r3, r0
 8000c38:	3401      	adds	r4, #1
 8000c3a:	9304      	str	r3, [sp, #16]
 8000c3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000c40:	482c      	ldr	r0, [pc, #176]	; (8000cf4 <_vfiprintf_r+0x250>)
 8000c42:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000c46:	2206      	movs	r2, #6
 8000c48:	f7ff fad2 	bl	80001f0 <memchr>
 8000c4c:	2800      	cmp	r0, #0
 8000c4e:	d03f      	beq.n	8000cd0 <_vfiprintf_r+0x22c>
 8000c50:	4b29      	ldr	r3, [pc, #164]	; (8000cf8 <_vfiprintf_r+0x254>)
 8000c52:	bb1b      	cbnz	r3, 8000c9c <_vfiprintf_r+0x1f8>
 8000c54:	9b03      	ldr	r3, [sp, #12]
 8000c56:	3307      	adds	r3, #7
 8000c58:	f023 0307 	bic.w	r3, r3, #7
 8000c5c:	3308      	adds	r3, #8
 8000c5e:	9303      	str	r3, [sp, #12]
 8000c60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000c62:	443b      	add	r3, r7
 8000c64:	9309      	str	r3, [sp, #36]	; 0x24
 8000c66:	e767      	b.n	8000b38 <_vfiprintf_r+0x94>
 8000c68:	fb0c 3202 	mla	r2, ip, r2, r3
 8000c6c:	460c      	mov	r4, r1
 8000c6e:	2001      	movs	r0, #1
 8000c70:	e7a5      	b.n	8000bbe <_vfiprintf_r+0x11a>
 8000c72:	2300      	movs	r3, #0
 8000c74:	3401      	adds	r4, #1
 8000c76:	9305      	str	r3, [sp, #20]
 8000c78:	4619      	mov	r1, r3
 8000c7a:	f04f 0c0a 	mov.w	ip, #10
 8000c7e:	4620      	mov	r0, r4
 8000c80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000c84:	3a30      	subs	r2, #48	; 0x30
 8000c86:	2a09      	cmp	r2, #9
 8000c88:	d903      	bls.n	8000c92 <_vfiprintf_r+0x1ee>
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d0c5      	beq.n	8000c1a <_vfiprintf_r+0x176>
 8000c8e:	9105      	str	r1, [sp, #20]
 8000c90:	e7c3      	b.n	8000c1a <_vfiprintf_r+0x176>
 8000c92:	fb0c 2101 	mla	r1, ip, r1, r2
 8000c96:	4604      	mov	r4, r0
 8000c98:	2301      	movs	r3, #1
 8000c9a:	e7f0      	b.n	8000c7e <_vfiprintf_r+0x1da>
 8000c9c:	ab03      	add	r3, sp, #12
 8000c9e:	9300      	str	r3, [sp, #0]
 8000ca0:	462a      	mov	r2, r5
 8000ca2:	4b16      	ldr	r3, [pc, #88]	; (8000cfc <_vfiprintf_r+0x258>)
 8000ca4:	a904      	add	r1, sp, #16
 8000ca6:	4630      	mov	r0, r6
 8000ca8:	f3af 8000 	nop.w
 8000cac:	4607      	mov	r7, r0
 8000cae:	1c78      	adds	r0, r7, #1
 8000cb0:	d1d6      	bne.n	8000c60 <_vfiprintf_r+0x1bc>
 8000cb2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000cb4:	07d9      	lsls	r1, r3, #31
 8000cb6:	d405      	bmi.n	8000cc4 <_vfiprintf_r+0x220>
 8000cb8:	89ab      	ldrh	r3, [r5, #12]
 8000cba:	059a      	lsls	r2, r3, #22
 8000cbc:	d402      	bmi.n	8000cc4 <_vfiprintf_r+0x220>
 8000cbe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000cc0:	f7ff fe31 	bl	8000926 <__retarget_lock_release_recursive>
 8000cc4:	89ab      	ldrh	r3, [r5, #12]
 8000cc6:	065b      	lsls	r3, r3, #25
 8000cc8:	f53f af12 	bmi.w	8000af0 <_vfiprintf_r+0x4c>
 8000ccc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000cce:	e711      	b.n	8000af4 <_vfiprintf_r+0x50>
 8000cd0:	ab03      	add	r3, sp, #12
 8000cd2:	9300      	str	r3, [sp, #0]
 8000cd4:	462a      	mov	r2, r5
 8000cd6:	4b09      	ldr	r3, [pc, #36]	; (8000cfc <_vfiprintf_r+0x258>)
 8000cd8:	a904      	add	r1, sp, #16
 8000cda:	4630      	mov	r0, r6
 8000cdc:	f000 f880 	bl	8000de0 <_printf_i>
 8000ce0:	e7e4      	b.n	8000cac <_vfiprintf_r+0x208>
 8000ce2:	bf00      	nop
 8000ce4:	08001678 	.word	0x08001678
 8000ce8:	08001698 	.word	0x08001698
 8000cec:	08001658 	.word	0x08001658
 8000cf0:	080016b8 	.word	0x080016b8
 8000cf4:	080016c2 	.word	0x080016c2
 8000cf8:	00000000 	.word	0x00000000
 8000cfc:	08000a7f 	.word	0x08000a7f
 8000d00:	080016be 	.word	0x080016be

08000d04 <_printf_common>:
 8000d04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d08:	4616      	mov	r6, r2
 8000d0a:	4699      	mov	r9, r3
 8000d0c:	688a      	ldr	r2, [r1, #8]
 8000d0e:	690b      	ldr	r3, [r1, #16]
 8000d10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000d14:	4293      	cmp	r3, r2
 8000d16:	bfb8      	it	lt
 8000d18:	4613      	movlt	r3, r2
 8000d1a:	6033      	str	r3, [r6, #0]
 8000d1c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000d20:	4607      	mov	r7, r0
 8000d22:	460c      	mov	r4, r1
 8000d24:	b10a      	cbz	r2, 8000d2a <_printf_common+0x26>
 8000d26:	3301      	adds	r3, #1
 8000d28:	6033      	str	r3, [r6, #0]
 8000d2a:	6823      	ldr	r3, [r4, #0]
 8000d2c:	0699      	lsls	r1, r3, #26
 8000d2e:	bf42      	ittt	mi
 8000d30:	6833      	ldrmi	r3, [r6, #0]
 8000d32:	3302      	addmi	r3, #2
 8000d34:	6033      	strmi	r3, [r6, #0]
 8000d36:	6825      	ldr	r5, [r4, #0]
 8000d38:	f015 0506 	ands.w	r5, r5, #6
 8000d3c:	d106      	bne.n	8000d4c <_printf_common+0x48>
 8000d3e:	f104 0a19 	add.w	sl, r4, #25
 8000d42:	68e3      	ldr	r3, [r4, #12]
 8000d44:	6832      	ldr	r2, [r6, #0]
 8000d46:	1a9b      	subs	r3, r3, r2
 8000d48:	42ab      	cmp	r3, r5
 8000d4a:	dc26      	bgt.n	8000d9a <_printf_common+0x96>
 8000d4c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000d50:	1e13      	subs	r3, r2, #0
 8000d52:	6822      	ldr	r2, [r4, #0]
 8000d54:	bf18      	it	ne
 8000d56:	2301      	movne	r3, #1
 8000d58:	0692      	lsls	r2, r2, #26
 8000d5a:	d42b      	bmi.n	8000db4 <_printf_common+0xb0>
 8000d5c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000d60:	4649      	mov	r1, r9
 8000d62:	4638      	mov	r0, r7
 8000d64:	47c0      	blx	r8
 8000d66:	3001      	adds	r0, #1
 8000d68:	d01e      	beq.n	8000da8 <_printf_common+0xa4>
 8000d6a:	6823      	ldr	r3, [r4, #0]
 8000d6c:	68e5      	ldr	r5, [r4, #12]
 8000d6e:	6832      	ldr	r2, [r6, #0]
 8000d70:	f003 0306 	and.w	r3, r3, #6
 8000d74:	2b04      	cmp	r3, #4
 8000d76:	bf08      	it	eq
 8000d78:	1aad      	subeq	r5, r5, r2
 8000d7a:	68a3      	ldr	r3, [r4, #8]
 8000d7c:	6922      	ldr	r2, [r4, #16]
 8000d7e:	bf0c      	ite	eq
 8000d80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000d84:	2500      	movne	r5, #0
 8000d86:	4293      	cmp	r3, r2
 8000d88:	bfc4      	itt	gt
 8000d8a:	1a9b      	subgt	r3, r3, r2
 8000d8c:	18ed      	addgt	r5, r5, r3
 8000d8e:	2600      	movs	r6, #0
 8000d90:	341a      	adds	r4, #26
 8000d92:	42b5      	cmp	r5, r6
 8000d94:	d11a      	bne.n	8000dcc <_printf_common+0xc8>
 8000d96:	2000      	movs	r0, #0
 8000d98:	e008      	b.n	8000dac <_printf_common+0xa8>
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	4652      	mov	r2, sl
 8000d9e:	4649      	mov	r1, r9
 8000da0:	4638      	mov	r0, r7
 8000da2:	47c0      	blx	r8
 8000da4:	3001      	adds	r0, #1
 8000da6:	d103      	bne.n	8000db0 <_printf_common+0xac>
 8000da8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db0:	3501      	adds	r5, #1
 8000db2:	e7c6      	b.n	8000d42 <_printf_common+0x3e>
 8000db4:	18e1      	adds	r1, r4, r3
 8000db6:	1c5a      	adds	r2, r3, #1
 8000db8:	2030      	movs	r0, #48	; 0x30
 8000dba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000dbe:	4422      	add	r2, r4
 8000dc0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000dc4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000dc8:	3302      	adds	r3, #2
 8000dca:	e7c7      	b.n	8000d5c <_printf_common+0x58>
 8000dcc:	2301      	movs	r3, #1
 8000dce:	4622      	mov	r2, r4
 8000dd0:	4649      	mov	r1, r9
 8000dd2:	4638      	mov	r0, r7
 8000dd4:	47c0      	blx	r8
 8000dd6:	3001      	adds	r0, #1
 8000dd8:	d0e6      	beq.n	8000da8 <_printf_common+0xa4>
 8000dda:	3601      	adds	r6, #1
 8000ddc:	e7d9      	b.n	8000d92 <_printf_common+0x8e>
	...

08000de0 <_printf_i>:
 8000de0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000de4:	7e0f      	ldrb	r7, [r1, #24]
 8000de6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000de8:	2f78      	cmp	r7, #120	; 0x78
 8000dea:	4691      	mov	r9, r2
 8000dec:	4680      	mov	r8, r0
 8000dee:	460c      	mov	r4, r1
 8000df0:	469a      	mov	sl, r3
 8000df2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8000df6:	d807      	bhi.n	8000e08 <_printf_i+0x28>
 8000df8:	2f62      	cmp	r7, #98	; 0x62
 8000dfa:	d80a      	bhi.n	8000e12 <_printf_i+0x32>
 8000dfc:	2f00      	cmp	r7, #0
 8000dfe:	f000 80d8 	beq.w	8000fb2 <_printf_i+0x1d2>
 8000e02:	2f58      	cmp	r7, #88	; 0x58
 8000e04:	f000 80a3 	beq.w	8000f4e <_printf_i+0x16e>
 8000e08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000e0c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8000e10:	e03a      	b.n	8000e88 <_printf_i+0xa8>
 8000e12:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8000e16:	2b15      	cmp	r3, #21
 8000e18:	d8f6      	bhi.n	8000e08 <_printf_i+0x28>
 8000e1a:	a101      	add	r1, pc, #4	; (adr r1, 8000e20 <_printf_i+0x40>)
 8000e1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000e20:	08000e79 	.word	0x08000e79
 8000e24:	08000e8d 	.word	0x08000e8d
 8000e28:	08000e09 	.word	0x08000e09
 8000e2c:	08000e09 	.word	0x08000e09
 8000e30:	08000e09 	.word	0x08000e09
 8000e34:	08000e09 	.word	0x08000e09
 8000e38:	08000e8d 	.word	0x08000e8d
 8000e3c:	08000e09 	.word	0x08000e09
 8000e40:	08000e09 	.word	0x08000e09
 8000e44:	08000e09 	.word	0x08000e09
 8000e48:	08000e09 	.word	0x08000e09
 8000e4c:	08000f99 	.word	0x08000f99
 8000e50:	08000ebd 	.word	0x08000ebd
 8000e54:	08000f7b 	.word	0x08000f7b
 8000e58:	08000e09 	.word	0x08000e09
 8000e5c:	08000e09 	.word	0x08000e09
 8000e60:	08000fbb 	.word	0x08000fbb
 8000e64:	08000e09 	.word	0x08000e09
 8000e68:	08000ebd 	.word	0x08000ebd
 8000e6c:	08000e09 	.word	0x08000e09
 8000e70:	08000e09 	.word	0x08000e09
 8000e74:	08000f83 	.word	0x08000f83
 8000e78:	682b      	ldr	r3, [r5, #0]
 8000e7a:	1d1a      	adds	r2, r3, #4
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	602a      	str	r2, [r5, #0]
 8000e80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000e84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000e88:	2301      	movs	r3, #1
 8000e8a:	e0a3      	b.n	8000fd4 <_printf_i+0x1f4>
 8000e8c:	6820      	ldr	r0, [r4, #0]
 8000e8e:	6829      	ldr	r1, [r5, #0]
 8000e90:	0606      	lsls	r6, r0, #24
 8000e92:	f101 0304 	add.w	r3, r1, #4
 8000e96:	d50a      	bpl.n	8000eae <_printf_i+0xce>
 8000e98:	680e      	ldr	r6, [r1, #0]
 8000e9a:	602b      	str	r3, [r5, #0]
 8000e9c:	2e00      	cmp	r6, #0
 8000e9e:	da03      	bge.n	8000ea8 <_printf_i+0xc8>
 8000ea0:	232d      	movs	r3, #45	; 0x2d
 8000ea2:	4276      	negs	r6, r6
 8000ea4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000ea8:	485e      	ldr	r0, [pc, #376]	; (8001024 <_printf_i+0x244>)
 8000eaa:	230a      	movs	r3, #10
 8000eac:	e019      	b.n	8000ee2 <_printf_i+0x102>
 8000eae:	680e      	ldr	r6, [r1, #0]
 8000eb0:	602b      	str	r3, [r5, #0]
 8000eb2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8000eb6:	bf18      	it	ne
 8000eb8:	b236      	sxthne	r6, r6
 8000eba:	e7ef      	b.n	8000e9c <_printf_i+0xbc>
 8000ebc:	682b      	ldr	r3, [r5, #0]
 8000ebe:	6820      	ldr	r0, [r4, #0]
 8000ec0:	1d19      	adds	r1, r3, #4
 8000ec2:	6029      	str	r1, [r5, #0]
 8000ec4:	0601      	lsls	r1, r0, #24
 8000ec6:	d501      	bpl.n	8000ecc <_printf_i+0xec>
 8000ec8:	681e      	ldr	r6, [r3, #0]
 8000eca:	e002      	b.n	8000ed2 <_printf_i+0xf2>
 8000ecc:	0646      	lsls	r6, r0, #25
 8000ece:	d5fb      	bpl.n	8000ec8 <_printf_i+0xe8>
 8000ed0:	881e      	ldrh	r6, [r3, #0]
 8000ed2:	4854      	ldr	r0, [pc, #336]	; (8001024 <_printf_i+0x244>)
 8000ed4:	2f6f      	cmp	r7, #111	; 0x6f
 8000ed6:	bf0c      	ite	eq
 8000ed8:	2308      	moveq	r3, #8
 8000eda:	230a      	movne	r3, #10
 8000edc:	2100      	movs	r1, #0
 8000ede:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8000ee2:	6865      	ldr	r5, [r4, #4]
 8000ee4:	60a5      	str	r5, [r4, #8]
 8000ee6:	2d00      	cmp	r5, #0
 8000ee8:	bfa2      	ittt	ge
 8000eea:	6821      	ldrge	r1, [r4, #0]
 8000eec:	f021 0104 	bicge.w	r1, r1, #4
 8000ef0:	6021      	strge	r1, [r4, #0]
 8000ef2:	b90e      	cbnz	r6, 8000ef8 <_printf_i+0x118>
 8000ef4:	2d00      	cmp	r5, #0
 8000ef6:	d04d      	beq.n	8000f94 <_printf_i+0x1b4>
 8000ef8:	4615      	mov	r5, r2
 8000efa:	fbb6 f1f3 	udiv	r1, r6, r3
 8000efe:	fb03 6711 	mls	r7, r3, r1, r6
 8000f02:	5dc7      	ldrb	r7, [r0, r7]
 8000f04:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8000f08:	4637      	mov	r7, r6
 8000f0a:	42bb      	cmp	r3, r7
 8000f0c:	460e      	mov	r6, r1
 8000f0e:	d9f4      	bls.n	8000efa <_printf_i+0x11a>
 8000f10:	2b08      	cmp	r3, #8
 8000f12:	d10b      	bne.n	8000f2c <_printf_i+0x14c>
 8000f14:	6823      	ldr	r3, [r4, #0]
 8000f16:	07de      	lsls	r6, r3, #31
 8000f18:	d508      	bpl.n	8000f2c <_printf_i+0x14c>
 8000f1a:	6923      	ldr	r3, [r4, #16]
 8000f1c:	6861      	ldr	r1, [r4, #4]
 8000f1e:	4299      	cmp	r1, r3
 8000f20:	bfde      	ittt	le
 8000f22:	2330      	movle	r3, #48	; 0x30
 8000f24:	f805 3c01 	strble.w	r3, [r5, #-1]
 8000f28:	f105 35ff 	addle.w	r5, r5, #4294967295
 8000f2c:	1b52      	subs	r2, r2, r5
 8000f2e:	6122      	str	r2, [r4, #16]
 8000f30:	f8cd a000 	str.w	sl, [sp]
 8000f34:	464b      	mov	r3, r9
 8000f36:	aa03      	add	r2, sp, #12
 8000f38:	4621      	mov	r1, r4
 8000f3a:	4640      	mov	r0, r8
 8000f3c:	f7ff fee2 	bl	8000d04 <_printf_common>
 8000f40:	3001      	adds	r0, #1
 8000f42:	d14c      	bne.n	8000fde <_printf_i+0x1fe>
 8000f44:	f04f 30ff 	mov.w	r0, #4294967295
 8000f48:	b004      	add	sp, #16
 8000f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4e:	4835      	ldr	r0, [pc, #212]	; (8001024 <_printf_i+0x244>)
 8000f50:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8000f54:	6829      	ldr	r1, [r5, #0]
 8000f56:	6823      	ldr	r3, [r4, #0]
 8000f58:	f851 6b04 	ldr.w	r6, [r1], #4
 8000f5c:	6029      	str	r1, [r5, #0]
 8000f5e:	061d      	lsls	r5, r3, #24
 8000f60:	d514      	bpl.n	8000f8c <_printf_i+0x1ac>
 8000f62:	07df      	lsls	r7, r3, #31
 8000f64:	bf44      	itt	mi
 8000f66:	f043 0320 	orrmi.w	r3, r3, #32
 8000f6a:	6023      	strmi	r3, [r4, #0]
 8000f6c:	b91e      	cbnz	r6, 8000f76 <_printf_i+0x196>
 8000f6e:	6823      	ldr	r3, [r4, #0]
 8000f70:	f023 0320 	bic.w	r3, r3, #32
 8000f74:	6023      	str	r3, [r4, #0]
 8000f76:	2310      	movs	r3, #16
 8000f78:	e7b0      	b.n	8000edc <_printf_i+0xfc>
 8000f7a:	6823      	ldr	r3, [r4, #0]
 8000f7c:	f043 0320 	orr.w	r3, r3, #32
 8000f80:	6023      	str	r3, [r4, #0]
 8000f82:	2378      	movs	r3, #120	; 0x78
 8000f84:	4828      	ldr	r0, [pc, #160]	; (8001028 <_printf_i+0x248>)
 8000f86:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8000f8a:	e7e3      	b.n	8000f54 <_printf_i+0x174>
 8000f8c:	0659      	lsls	r1, r3, #25
 8000f8e:	bf48      	it	mi
 8000f90:	b2b6      	uxthmi	r6, r6
 8000f92:	e7e6      	b.n	8000f62 <_printf_i+0x182>
 8000f94:	4615      	mov	r5, r2
 8000f96:	e7bb      	b.n	8000f10 <_printf_i+0x130>
 8000f98:	682b      	ldr	r3, [r5, #0]
 8000f9a:	6826      	ldr	r6, [r4, #0]
 8000f9c:	6961      	ldr	r1, [r4, #20]
 8000f9e:	1d18      	adds	r0, r3, #4
 8000fa0:	6028      	str	r0, [r5, #0]
 8000fa2:	0635      	lsls	r5, r6, #24
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	d501      	bpl.n	8000fac <_printf_i+0x1cc>
 8000fa8:	6019      	str	r1, [r3, #0]
 8000faa:	e002      	b.n	8000fb2 <_printf_i+0x1d2>
 8000fac:	0670      	lsls	r0, r6, #25
 8000fae:	d5fb      	bpl.n	8000fa8 <_printf_i+0x1c8>
 8000fb0:	8019      	strh	r1, [r3, #0]
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	6123      	str	r3, [r4, #16]
 8000fb6:	4615      	mov	r5, r2
 8000fb8:	e7ba      	b.n	8000f30 <_printf_i+0x150>
 8000fba:	682b      	ldr	r3, [r5, #0]
 8000fbc:	1d1a      	adds	r2, r3, #4
 8000fbe:	602a      	str	r2, [r5, #0]
 8000fc0:	681d      	ldr	r5, [r3, #0]
 8000fc2:	6862      	ldr	r2, [r4, #4]
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	4628      	mov	r0, r5
 8000fc8:	f7ff f912 	bl	80001f0 <memchr>
 8000fcc:	b108      	cbz	r0, 8000fd2 <_printf_i+0x1f2>
 8000fce:	1b40      	subs	r0, r0, r5
 8000fd0:	6060      	str	r0, [r4, #4]
 8000fd2:	6863      	ldr	r3, [r4, #4]
 8000fd4:	6123      	str	r3, [r4, #16]
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000fdc:	e7a8      	b.n	8000f30 <_printf_i+0x150>
 8000fde:	6923      	ldr	r3, [r4, #16]
 8000fe0:	462a      	mov	r2, r5
 8000fe2:	4649      	mov	r1, r9
 8000fe4:	4640      	mov	r0, r8
 8000fe6:	47d0      	blx	sl
 8000fe8:	3001      	adds	r0, #1
 8000fea:	d0ab      	beq.n	8000f44 <_printf_i+0x164>
 8000fec:	6823      	ldr	r3, [r4, #0]
 8000fee:	079b      	lsls	r3, r3, #30
 8000ff0:	d413      	bmi.n	800101a <_printf_i+0x23a>
 8000ff2:	68e0      	ldr	r0, [r4, #12]
 8000ff4:	9b03      	ldr	r3, [sp, #12]
 8000ff6:	4298      	cmp	r0, r3
 8000ff8:	bfb8      	it	lt
 8000ffa:	4618      	movlt	r0, r3
 8000ffc:	e7a4      	b.n	8000f48 <_printf_i+0x168>
 8000ffe:	2301      	movs	r3, #1
 8001000:	4632      	mov	r2, r6
 8001002:	4649      	mov	r1, r9
 8001004:	4640      	mov	r0, r8
 8001006:	47d0      	blx	sl
 8001008:	3001      	adds	r0, #1
 800100a:	d09b      	beq.n	8000f44 <_printf_i+0x164>
 800100c:	3501      	adds	r5, #1
 800100e:	68e3      	ldr	r3, [r4, #12]
 8001010:	9903      	ldr	r1, [sp, #12]
 8001012:	1a5b      	subs	r3, r3, r1
 8001014:	42ab      	cmp	r3, r5
 8001016:	dcf2      	bgt.n	8000ffe <_printf_i+0x21e>
 8001018:	e7eb      	b.n	8000ff2 <_printf_i+0x212>
 800101a:	2500      	movs	r5, #0
 800101c:	f104 0619 	add.w	r6, r4, #25
 8001020:	e7f5      	b.n	800100e <_printf_i+0x22e>
 8001022:	bf00      	nop
 8001024:	080016c9 	.word	0x080016c9
 8001028:	080016da 	.word	0x080016da

0800102c <_sbrk_r>:
 800102c:	b538      	push	{r3, r4, r5, lr}
 800102e:	4d06      	ldr	r5, [pc, #24]	; (8001048 <_sbrk_r+0x1c>)
 8001030:	2300      	movs	r3, #0
 8001032:	4604      	mov	r4, r0
 8001034:	4608      	mov	r0, r1
 8001036:	602b      	str	r3, [r5, #0]
 8001038:	f7ff fad4 	bl	80005e4 <_sbrk>
 800103c:	1c43      	adds	r3, r0, #1
 800103e:	d102      	bne.n	8001046 <_sbrk_r+0x1a>
 8001040:	682b      	ldr	r3, [r5, #0]
 8001042:	b103      	cbz	r3, 8001046 <_sbrk_r+0x1a>
 8001044:	6023      	str	r3, [r4, #0]
 8001046:	bd38      	pop	{r3, r4, r5, pc}
 8001048:	20000094 	.word	0x20000094

0800104c <__sread>:
 800104c:	b510      	push	{r4, lr}
 800104e:	460c      	mov	r4, r1
 8001050:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001054:	f000 fab2 	bl	80015bc <_read_r>
 8001058:	2800      	cmp	r0, #0
 800105a:	bfab      	itete	ge
 800105c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800105e:	89a3      	ldrhlt	r3, [r4, #12]
 8001060:	181b      	addge	r3, r3, r0
 8001062:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001066:	bfac      	ite	ge
 8001068:	6563      	strge	r3, [r4, #84]	; 0x54
 800106a:	81a3      	strhlt	r3, [r4, #12]
 800106c:	bd10      	pop	{r4, pc}

0800106e <__swrite>:
 800106e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001072:	461f      	mov	r7, r3
 8001074:	898b      	ldrh	r3, [r1, #12]
 8001076:	05db      	lsls	r3, r3, #23
 8001078:	4605      	mov	r5, r0
 800107a:	460c      	mov	r4, r1
 800107c:	4616      	mov	r6, r2
 800107e:	d505      	bpl.n	800108c <__swrite+0x1e>
 8001080:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001084:	2302      	movs	r3, #2
 8001086:	2200      	movs	r2, #0
 8001088:	f000 f9c8 	bl	800141c <_lseek_r>
 800108c:	89a3      	ldrh	r3, [r4, #12]
 800108e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001092:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001096:	81a3      	strh	r3, [r4, #12]
 8001098:	4632      	mov	r2, r6
 800109a:	463b      	mov	r3, r7
 800109c:	4628      	mov	r0, r5
 800109e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80010a2:	f000 b869 	b.w	8001178 <_write_r>

080010a6 <__sseek>:
 80010a6:	b510      	push	{r4, lr}
 80010a8:	460c      	mov	r4, r1
 80010aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80010ae:	f000 f9b5 	bl	800141c <_lseek_r>
 80010b2:	1c43      	adds	r3, r0, #1
 80010b4:	89a3      	ldrh	r3, [r4, #12]
 80010b6:	bf15      	itete	ne
 80010b8:	6560      	strne	r0, [r4, #84]	; 0x54
 80010ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80010be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80010c2:	81a3      	strheq	r3, [r4, #12]
 80010c4:	bf18      	it	ne
 80010c6:	81a3      	strhne	r3, [r4, #12]
 80010c8:	bd10      	pop	{r4, pc}

080010ca <__sclose>:
 80010ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80010ce:	f000 b8d3 	b.w	8001278 <_close_r>
	...

080010d4 <__swbuf_r>:
 80010d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010d6:	460e      	mov	r6, r1
 80010d8:	4614      	mov	r4, r2
 80010da:	4605      	mov	r5, r0
 80010dc:	b118      	cbz	r0, 80010e6 <__swbuf_r+0x12>
 80010de:	6983      	ldr	r3, [r0, #24]
 80010e0:	b90b      	cbnz	r3, 80010e6 <__swbuf_r+0x12>
 80010e2:	f7ff fb81 	bl	80007e8 <__sinit>
 80010e6:	4b21      	ldr	r3, [pc, #132]	; (800116c <__swbuf_r+0x98>)
 80010e8:	429c      	cmp	r4, r3
 80010ea:	d12b      	bne.n	8001144 <__swbuf_r+0x70>
 80010ec:	686c      	ldr	r4, [r5, #4]
 80010ee:	69a3      	ldr	r3, [r4, #24]
 80010f0:	60a3      	str	r3, [r4, #8]
 80010f2:	89a3      	ldrh	r3, [r4, #12]
 80010f4:	071a      	lsls	r2, r3, #28
 80010f6:	d52f      	bpl.n	8001158 <__swbuf_r+0x84>
 80010f8:	6923      	ldr	r3, [r4, #16]
 80010fa:	b36b      	cbz	r3, 8001158 <__swbuf_r+0x84>
 80010fc:	6923      	ldr	r3, [r4, #16]
 80010fe:	6820      	ldr	r0, [r4, #0]
 8001100:	1ac0      	subs	r0, r0, r3
 8001102:	6963      	ldr	r3, [r4, #20]
 8001104:	b2f6      	uxtb	r6, r6
 8001106:	4283      	cmp	r3, r0
 8001108:	4637      	mov	r7, r6
 800110a:	dc04      	bgt.n	8001116 <__swbuf_r+0x42>
 800110c:	4621      	mov	r1, r4
 800110e:	4628      	mov	r0, r5
 8001110:	f000 f948 	bl	80013a4 <_fflush_r>
 8001114:	bb30      	cbnz	r0, 8001164 <__swbuf_r+0x90>
 8001116:	68a3      	ldr	r3, [r4, #8]
 8001118:	3b01      	subs	r3, #1
 800111a:	60a3      	str	r3, [r4, #8]
 800111c:	6823      	ldr	r3, [r4, #0]
 800111e:	1c5a      	adds	r2, r3, #1
 8001120:	6022      	str	r2, [r4, #0]
 8001122:	701e      	strb	r6, [r3, #0]
 8001124:	6963      	ldr	r3, [r4, #20]
 8001126:	3001      	adds	r0, #1
 8001128:	4283      	cmp	r3, r0
 800112a:	d004      	beq.n	8001136 <__swbuf_r+0x62>
 800112c:	89a3      	ldrh	r3, [r4, #12]
 800112e:	07db      	lsls	r3, r3, #31
 8001130:	d506      	bpl.n	8001140 <__swbuf_r+0x6c>
 8001132:	2e0a      	cmp	r6, #10
 8001134:	d104      	bne.n	8001140 <__swbuf_r+0x6c>
 8001136:	4621      	mov	r1, r4
 8001138:	4628      	mov	r0, r5
 800113a:	f000 f933 	bl	80013a4 <_fflush_r>
 800113e:	b988      	cbnz	r0, 8001164 <__swbuf_r+0x90>
 8001140:	4638      	mov	r0, r7
 8001142:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001144:	4b0a      	ldr	r3, [pc, #40]	; (8001170 <__swbuf_r+0x9c>)
 8001146:	429c      	cmp	r4, r3
 8001148:	d101      	bne.n	800114e <__swbuf_r+0x7a>
 800114a:	68ac      	ldr	r4, [r5, #8]
 800114c:	e7cf      	b.n	80010ee <__swbuf_r+0x1a>
 800114e:	4b09      	ldr	r3, [pc, #36]	; (8001174 <__swbuf_r+0xa0>)
 8001150:	429c      	cmp	r4, r3
 8001152:	bf08      	it	eq
 8001154:	68ec      	ldreq	r4, [r5, #12]
 8001156:	e7ca      	b.n	80010ee <__swbuf_r+0x1a>
 8001158:	4621      	mov	r1, r4
 800115a:	4628      	mov	r0, r5
 800115c:	f000 f81e 	bl	800119c <__swsetup_r>
 8001160:	2800      	cmp	r0, #0
 8001162:	d0cb      	beq.n	80010fc <__swbuf_r+0x28>
 8001164:	f04f 37ff 	mov.w	r7, #4294967295
 8001168:	e7ea      	b.n	8001140 <__swbuf_r+0x6c>
 800116a:	bf00      	nop
 800116c:	08001678 	.word	0x08001678
 8001170:	08001698 	.word	0x08001698
 8001174:	08001658 	.word	0x08001658

08001178 <_write_r>:
 8001178:	b538      	push	{r3, r4, r5, lr}
 800117a:	4d07      	ldr	r5, [pc, #28]	; (8001198 <_write_r+0x20>)
 800117c:	4604      	mov	r4, r0
 800117e:	4608      	mov	r0, r1
 8001180:	4611      	mov	r1, r2
 8001182:	2200      	movs	r2, #0
 8001184:	602a      	str	r2, [r5, #0]
 8001186:	461a      	mov	r2, r3
 8001188:	f7ff f9db 	bl	8000542 <_write>
 800118c:	1c43      	adds	r3, r0, #1
 800118e:	d102      	bne.n	8001196 <_write_r+0x1e>
 8001190:	682b      	ldr	r3, [r5, #0]
 8001192:	b103      	cbz	r3, 8001196 <_write_r+0x1e>
 8001194:	6023      	str	r3, [r4, #0]
 8001196:	bd38      	pop	{r3, r4, r5, pc}
 8001198:	20000094 	.word	0x20000094

0800119c <__swsetup_r>:
 800119c:	4b32      	ldr	r3, [pc, #200]	; (8001268 <__swsetup_r+0xcc>)
 800119e:	b570      	push	{r4, r5, r6, lr}
 80011a0:	681d      	ldr	r5, [r3, #0]
 80011a2:	4606      	mov	r6, r0
 80011a4:	460c      	mov	r4, r1
 80011a6:	b125      	cbz	r5, 80011b2 <__swsetup_r+0x16>
 80011a8:	69ab      	ldr	r3, [r5, #24]
 80011aa:	b913      	cbnz	r3, 80011b2 <__swsetup_r+0x16>
 80011ac:	4628      	mov	r0, r5
 80011ae:	f7ff fb1b 	bl	80007e8 <__sinit>
 80011b2:	4b2e      	ldr	r3, [pc, #184]	; (800126c <__swsetup_r+0xd0>)
 80011b4:	429c      	cmp	r4, r3
 80011b6:	d10f      	bne.n	80011d8 <__swsetup_r+0x3c>
 80011b8:	686c      	ldr	r4, [r5, #4]
 80011ba:	89a3      	ldrh	r3, [r4, #12]
 80011bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80011c0:	0719      	lsls	r1, r3, #28
 80011c2:	d42c      	bmi.n	800121e <__swsetup_r+0x82>
 80011c4:	06dd      	lsls	r5, r3, #27
 80011c6:	d411      	bmi.n	80011ec <__swsetup_r+0x50>
 80011c8:	2309      	movs	r3, #9
 80011ca:	6033      	str	r3, [r6, #0]
 80011cc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80011d0:	81a3      	strh	r3, [r4, #12]
 80011d2:	f04f 30ff 	mov.w	r0, #4294967295
 80011d6:	e03e      	b.n	8001256 <__swsetup_r+0xba>
 80011d8:	4b25      	ldr	r3, [pc, #148]	; (8001270 <__swsetup_r+0xd4>)
 80011da:	429c      	cmp	r4, r3
 80011dc:	d101      	bne.n	80011e2 <__swsetup_r+0x46>
 80011de:	68ac      	ldr	r4, [r5, #8]
 80011e0:	e7eb      	b.n	80011ba <__swsetup_r+0x1e>
 80011e2:	4b24      	ldr	r3, [pc, #144]	; (8001274 <__swsetup_r+0xd8>)
 80011e4:	429c      	cmp	r4, r3
 80011e6:	bf08      	it	eq
 80011e8:	68ec      	ldreq	r4, [r5, #12]
 80011ea:	e7e6      	b.n	80011ba <__swsetup_r+0x1e>
 80011ec:	0758      	lsls	r0, r3, #29
 80011ee:	d512      	bpl.n	8001216 <__swsetup_r+0x7a>
 80011f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80011f2:	b141      	cbz	r1, 8001206 <__swsetup_r+0x6a>
 80011f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80011f8:	4299      	cmp	r1, r3
 80011fa:	d002      	beq.n	8001202 <__swsetup_r+0x66>
 80011fc:	4630      	mov	r0, r6
 80011fe:	f000 f991 	bl	8001524 <_free_r>
 8001202:	2300      	movs	r3, #0
 8001204:	6363      	str	r3, [r4, #52]	; 0x34
 8001206:	89a3      	ldrh	r3, [r4, #12]
 8001208:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800120c:	81a3      	strh	r3, [r4, #12]
 800120e:	2300      	movs	r3, #0
 8001210:	6063      	str	r3, [r4, #4]
 8001212:	6923      	ldr	r3, [r4, #16]
 8001214:	6023      	str	r3, [r4, #0]
 8001216:	89a3      	ldrh	r3, [r4, #12]
 8001218:	f043 0308 	orr.w	r3, r3, #8
 800121c:	81a3      	strh	r3, [r4, #12]
 800121e:	6923      	ldr	r3, [r4, #16]
 8001220:	b94b      	cbnz	r3, 8001236 <__swsetup_r+0x9a>
 8001222:	89a3      	ldrh	r3, [r4, #12]
 8001224:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001228:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800122c:	d003      	beq.n	8001236 <__swsetup_r+0x9a>
 800122e:	4621      	mov	r1, r4
 8001230:	4630      	mov	r0, r6
 8001232:	f000 f92b 	bl	800148c <__smakebuf_r>
 8001236:	89a0      	ldrh	r0, [r4, #12]
 8001238:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800123c:	f010 0301 	ands.w	r3, r0, #1
 8001240:	d00a      	beq.n	8001258 <__swsetup_r+0xbc>
 8001242:	2300      	movs	r3, #0
 8001244:	60a3      	str	r3, [r4, #8]
 8001246:	6963      	ldr	r3, [r4, #20]
 8001248:	425b      	negs	r3, r3
 800124a:	61a3      	str	r3, [r4, #24]
 800124c:	6923      	ldr	r3, [r4, #16]
 800124e:	b943      	cbnz	r3, 8001262 <__swsetup_r+0xc6>
 8001250:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001254:	d1ba      	bne.n	80011cc <__swsetup_r+0x30>
 8001256:	bd70      	pop	{r4, r5, r6, pc}
 8001258:	0781      	lsls	r1, r0, #30
 800125a:	bf58      	it	pl
 800125c:	6963      	ldrpl	r3, [r4, #20]
 800125e:	60a3      	str	r3, [r4, #8]
 8001260:	e7f4      	b.n	800124c <__swsetup_r+0xb0>
 8001262:	2000      	movs	r0, #0
 8001264:	e7f7      	b.n	8001256 <__swsetup_r+0xba>
 8001266:	bf00      	nop
 8001268:	20000000 	.word	0x20000000
 800126c:	08001678 	.word	0x08001678
 8001270:	08001698 	.word	0x08001698
 8001274:	08001658 	.word	0x08001658

08001278 <_close_r>:
 8001278:	b538      	push	{r3, r4, r5, lr}
 800127a:	4d06      	ldr	r5, [pc, #24]	; (8001294 <_close_r+0x1c>)
 800127c:	2300      	movs	r3, #0
 800127e:	4604      	mov	r4, r0
 8001280:	4608      	mov	r0, r1
 8001282:	602b      	str	r3, [r5, #0]
 8001284:	f7ff f979 	bl	800057a <_close>
 8001288:	1c43      	adds	r3, r0, #1
 800128a:	d102      	bne.n	8001292 <_close_r+0x1a>
 800128c:	682b      	ldr	r3, [r5, #0]
 800128e:	b103      	cbz	r3, 8001292 <_close_r+0x1a>
 8001290:	6023      	str	r3, [r4, #0]
 8001292:	bd38      	pop	{r3, r4, r5, pc}
 8001294:	20000094 	.word	0x20000094

08001298 <__sflush_r>:
 8001298:	898a      	ldrh	r2, [r1, #12]
 800129a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800129e:	4605      	mov	r5, r0
 80012a0:	0710      	lsls	r0, r2, #28
 80012a2:	460c      	mov	r4, r1
 80012a4:	d458      	bmi.n	8001358 <__sflush_r+0xc0>
 80012a6:	684b      	ldr	r3, [r1, #4]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	dc05      	bgt.n	80012b8 <__sflush_r+0x20>
 80012ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	dc02      	bgt.n	80012b8 <__sflush_r+0x20>
 80012b2:	2000      	movs	r0, #0
 80012b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80012b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80012ba:	2e00      	cmp	r6, #0
 80012bc:	d0f9      	beq.n	80012b2 <__sflush_r+0x1a>
 80012be:	2300      	movs	r3, #0
 80012c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80012c4:	682f      	ldr	r7, [r5, #0]
 80012c6:	602b      	str	r3, [r5, #0]
 80012c8:	d032      	beq.n	8001330 <__sflush_r+0x98>
 80012ca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80012cc:	89a3      	ldrh	r3, [r4, #12]
 80012ce:	075a      	lsls	r2, r3, #29
 80012d0:	d505      	bpl.n	80012de <__sflush_r+0x46>
 80012d2:	6863      	ldr	r3, [r4, #4]
 80012d4:	1ac0      	subs	r0, r0, r3
 80012d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80012d8:	b10b      	cbz	r3, 80012de <__sflush_r+0x46>
 80012da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80012dc:	1ac0      	subs	r0, r0, r3
 80012de:	2300      	movs	r3, #0
 80012e0:	4602      	mov	r2, r0
 80012e2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80012e4:	6a21      	ldr	r1, [r4, #32]
 80012e6:	4628      	mov	r0, r5
 80012e8:	47b0      	blx	r6
 80012ea:	1c43      	adds	r3, r0, #1
 80012ec:	89a3      	ldrh	r3, [r4, #12]
 80012ee:	d106      	bne.n	80012fe <__sflush_r+0x66>
 80012f0:	6829      	ldr	r1, [r5, #0]
 80012f2:	291d      	cmp	r1, #29
 80012f4:	d82c      	bhi.n	8001350 <__sflush_r+0xb8>
 80012f6:	4a2a      	ldr	r2, [pc, #168]	; (80013a0 <__sflush_r+0x108>)
 80012f8:	40ca      	lsrs	r2, r1
 80012fa:	07d6      	lsls	r6, r2, #31
 80012fc:	d528      	bpl.n	8001350 <__sflush_r+0xb8>
 80012fe:	2200      	movs	r2, #0
 8001300:	6062      	str	r2, [r4, #4]
 8001302:	04d9      	lsls	r1, r3, #19
 8001304:	6922      	ldr	r2, [r4, #16]
 8001306:	6022      	str	r2, [r4, #0]
 8001308:	d504      	bpl.n	8001314 <__sflush_r+0x7c>
 800130a:	1c42      	adds	r2, r0, #1
 800130c:	d101      	bne.n	8001312 <__sflush_r+0x7a>
 800130e:	682b      	ldr	r3, [r5, #0]
 8001310:	b903      	cbnz	r3, 8001314 <__sflush_r+0x7c>
 8001312:	6560      	str	r0, [r4, #84]	; 0x54
 8001314:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001316:	602f      	str	r7, [r5, #0]
 8001318:	2900      	cmp	r1, #0
 800131a:	d0ca      	beq.n	80012b2 <__sflush_r+0x1a>
 800131c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001320:	4299      	cmp	r1, r3
 8001322:	d002      	beq.n	800132a <__sflush_r+0x92>
 8001324:	4628      	mov	r0, r5
 8001326:	f000 f8fd 	bl	8001524 <_free_r>
 800132a:	2000      	movs	r0, #0
 800132c:	6360      	str	r0, [r4, #52]	; 0x34
 800132e:	e7c1      	b.n	80012b4 <__sflush_r+0x1c>
 8001330:	6a21      	ldr	r1, [r4, #32]
 8001332:	2301      	movs	r3, #1
 8001334:	4628      	mov	r0, r5
 8001336:	47b0      	blx	r6
 8001338:	1c41      	adds	r1, r0, #1
 800133a:	d1c7      	bne.n	80012cc <__sflush_r+0x34>
 800133c:	682b      	ldr	r3, [r5, #0]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d0c4      	beq.n	80012cc <__sflush_r+0x34>
 8001342:	2b1d      	cmp	r3, #29
 8001344:	d001      	beq.n	800134a <__sflush_r+0xb2>
 8001346:	2b16      	cmp	r3, #22
 8001348:	d101      	bne.n	800134e <__sflush_r+0xb6>
 800134a:	602f      	str	r7, [r5, #0]
 800134c:	e7b1      	b.n	80012b2 <__sflush_r+0x1a>
 800134e:	89a3      	ldrh	r3, [r4, #12]
 8001350:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001354:	81a3      	strh	r3, [r4, #12]
 8001356:	e7ad      	b.n	80012b4 <__sflush_r+0x1c>
 8001358:	690f      	ldr	r7, [r1, #16]
 800135a:	2f00      	cmp	r7, #0
 800135c:	d0a9      	beq.n	80012b2 <__sflush_r+0x1a>
 800135e:	0793      	lsls	r3, r2, #30
 8001360:	680e      	ldr	r6, [r1, #0]
 8001362:	bf08      	it	eq
 8001364:	694b      	ldreq	r3, [r1, #20]
 8001366:	600f      	str	r7, [r1, #0]
 8001368:	bf18      	it	ne
 800136a:	2300      	movne	r3, #0
 800136c:	eba6 0807 	sub.w	r8, r6, r7
 8001370:	608b      	str	r3, [r1, #8]
 8001372:	f1b8 0f00 	cmp.w	r8, #0
 8001376:	dd9c      	ble.n	80012b2 <__sflush_r+0x1a>
 8001378:	6a21      	ldr	r1, [r4, #32]
 800137a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800137c:	4643      	mov	r3, r8
 800137e:	463a      	mov	r2, r7
 8001380:	4628      	mov	r0, r5
 8001382:	47b0      	blx	r6
 8001384:	2800      	cmp	r0, #0
 8001386:	dc06      	bgt.n	8001396 <__sflush_r+0xfe>
 8001388:	89a3      	ldrh	r3, [r4, #12]
 800138a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800138e:	81a3      	strh	r3, [r4, #12]
 8001390:	f04f 30ff 	mov.w	r0, #4294967295
 8001394:	e78e      	b.n	80012b4 <__sflush_r+0x1c>
 8001396:	4407      	add	r7, r0
 8001398:	eba8 0800 	sub.w	r8, r8, r0
 800139c:	e7e9      	b.n	8001372 <__sflush_r+0xda>
 800139e:	bf00      	nop
 80013a0:	20400001 	.word	0x20400001

080013a4 <_fflush_r>:
 80013a4:	b538      	push	{r3, r4, r5, lr}
 80013a6:	690b      	ldr	r3, [r1, #16]
 80013a8:	4605      	mov	r5, r0
 80013aa:	460c      	mov	r4, r1
 80013ac:	b913      	cbnz	r3, 80013b4 <_fflush_r+0x10>
 80013ae:	2500      	movs	r5, #0
 80013b0:	4628      	mov	r0, r5
 80013b2:	bd38      	pop	{r3, r4, r5, pc}
 80013b4:	b118      	cbz	r0, 80013be <_fflush_r+0x1a>
 80013b6:	6983      	ldr	r3, [r0, #24]
 80013b8:	b90b      	cbnz	r3, 80013be <_fflush_r+0x1a>
 80013ba:	f7ff fa15 	bl	80007e8 <__sinit>
 80013be:	4b14      	ldr	r3, [pc, #80]	; (8001410 <_fflush_r+0x6c>)
 80013c0:	429c      	cmp	r4, r3
 80013c2:	d11b      	bne.n	80013fc <_fflush_r+0x58>
 80013c4:	686c      	ldr	r4, [r5, #4]
 80013c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d0ef      	beq.n	80013ae <_fflush_r+0xa>
 80013ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80013d0:	07d0      	lsls	r0, r2, #31
 80013d2:	d404      	bmi.n	80013de <_fflush_r+0x3a>
 80013d4:	0599      	lsls	r1, r3, #22
 80013d6:	d402      	bmi.n	80013de <_fflush_r+0x3a>
 80013d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80013da:	f7ff faa3 	bl	8000924 <__retarget_lock_acquire_recursive>
 80013de:	4628      	mov	r0, r5
 80013e0:	4621      	mov	r1, r4
 80013e2:	f7ff ff59 	bl	8001298 <__sflush_r>
 80013e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80013e8:	07da      	lsls	r2, r3, #31
 80013ea:	4605      	mov	r5, r0
 80013ec:	d4e0      	bmi.n	80013b0 <_fflush_r+0xc>
 80013ee:	89a3      	ldrh	r3, [r4, #12]
 80013f0:	059b      	lsls	r3, r3, #22
 80013f2:	d4dd      	bmi.n	80013b0 <_fflush_r+0xc>
 80013f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80013f6:	f7ff fa96 	bl	8000926 <__retarget_lock_release_recursive>
 80013fa:	e7d9      	b.n	80013b0 <_fflush_r+0xc>
 80013fc:	4b05      	ldr	r3, [pc, #20]	; (8001414 <_fflush_r+0x70>)
 80013fe:	429c      	cmp	r4, r3
 8001400:	d101      	bne.n	8001406 <_fflush_r+0x62>
 8001402:	68ac      	ldr	r4, [r5, #8]
 8001404:	e7df      	b.n	80013c6 <_fflush_r+0x22>
 8001406:	4b04      	ldr	r3, [pc, #16]	; (8001418 <_fflush_r+0x74>)
 8001408:	429c      	cmp	r4, r3
 800140a:	bf08      	it	eq
 800140c:	68ec      	ldreq	r4, [r5, #12]
 800140e:	e7da      	b.n	80013c6 <_fflush_r+0x22>
 8001410:	08001678 	.word	0x08001678
 8001414:	08001698 	.word	0x08001698
 8001418:	08001658 	.word	0x08001658

0800141c <_lseek_r>:
 800141c:	b538      	push	{r3, r4, r5, lr}
 800141e:	4d07      	ldr	r5, [pc, #28]	; (800143c <_lseek_r+0x20>)
 8001420:	4604      	mov	r4, r0
 8001422:	4608      	mov	r0, r1
 8001424:	4611      	mov	r1, r2
 8001426:	2200      	movs	r2, #0
 8001428:	602a      	str	r2, [r5, #0]
 800142a:	461a      	mov	r2, r3
 800142c:	f7ff f8cc 	bl	80005c8 <_lseek>
 8001430:	1c43      	adds	r3, r0, #1
 8001432:	d102      	bne.n	800143a <_lseek_r+0x1e>
 8001434:	682b      	ldr	r3, [r5, #0]
 8001436:	b103      	cbz	r3, 800143a <_lseek_r+0x1e>
 8001438:	6023      	str	r3, [r4, #0]
 800143a:	bd38      	pop	{r3, r4, r5, pc}
 800143c:	20000094 	.word	0x20000094

08001440 <__swhatbuf_r>:
 8001440:	b570      	push	{r4, r5, r6, lr}
 8001442:	460e      	mov	r6, r1
 8001444:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001448:	2900      	cmp	r1, #0
 800144a:	b096      	sub	sp, #88	; 0x58
 800144c:	4614      	mov	r4, r2
 800144e:	461d      	mov	r5, r3
 8001450:	da08      	bge.n	8001464 <__swhatbuf_r+0x24>
 8001452:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8001456:	2200      	movs	r2, #0
 8001458:	602a      	str	r2, [r5, #0]
 800145a:	061a      	lsls	r2, r3, #24
 800145c:	d410      	bmi.n	8001480 <__swhatbuf_r+0x40>
 800145e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001462:	e00e      	b.n	8001482 <__swhatbuf_r+0x42>
 8001464:	466a      	mov	r2, sp
 8001466:	f000 f8bb 	bl	80015e0 <_fstat_r>
 800146a:	2800      	cmp	r0, #0
 800146c:	dbf1      	blt.n	8001452 <__swhatbuf_r+0x12>
 800146e:	9a01      	ldr	r2, [sp, #4]
 8001470:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001474:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001478:	425a      	negs	r2, r3
 800147a:	415a      	adcs	r2, r3
 800147c:	602a      	str	r2, [r5, #0]
 800147e:	e7ee      	b.n	800145e <__swhatbuf_r+0x1e>
 8001480:	2340      	movs	r3, #64	; 0x40
 8001482:	2000      	movs	r0, #0
 8001484:	6023      	str	r3, [r4, #0]
 8001486:	b016      	add	sp, #88	; 0x58
 8001488:	bd70      	pop	{r4, r5, r6, pc}
	...

0800148c <__smakebuf_r>:
 800148c:	898b      	ldrh	r3, [r1, #12]
 800148e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001490:	079d      	lsls	r5, r3, #30
 8001492:	4606      	mov	r6, r0
 8001494:	460c      	mov	r4, r1
 8001496:	d507      	bpl.n	80014a8 <__smakebuf_r+0x1c>
 8001498:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800149c:	6023      	str	r3, [r4, #0]
 800149e:	6123      	str	r3, [r4, #16]
 80014a0:	2301      	movs	r3, #1
 80014a2:	6163      	str	r3, [r4, #20]
 80014a4:	b002      	add	sp, #8
 80014a6:	bd70      	pop	{r4, r5, r6, pc}
 80014a8:	ab01      	add	r3, sp, #4
 80014aa:	466a      	mov	r2, sp
 80014ac:	f7ff ffc8 	bl	8001440 <__swhatbuf_r>
 80014b0:	9900      	ldr	r1, [sp, #0]
 80014b2:	4605      	mov	r5, r0
 80014b4:	4630      	mov	r0, r6
 80014b6:	f7ff fa57 	bl	8000968 <_malloc_r>
 80014ba:	b948      	cbnz	r0, 80014d0 <__smakebuf_r+0x44>
 80014bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80014c0:	059a      	lsls	r2, r3, #22
 80014c2:	d4ef      	bmi.n	80014a4 <__smakebuf_r+0x18>
 80014c4:	f023 0303 	bic.w	r3, r3, #3
 80014c8:	f043 0302 	orr.w	r3, r3, #2
 80014cc:	81a3      	strh	r3, [r4, #12]
 80014ce:	e7e3      	b.n	8001498 <__smakebuf_r+0xc>
 80014d0:	4b0d      	ldr	r3, [pc, #52]	; (8001508 <__smakebuf_r+0x7c>)
 80014d2:	62b3      	str	r3, [r6, #40]	; 0x28
 80014d4:	89a3      	ldrh	r3, [r4, #12]
 80014d6:	6020      	str	r0, [r4, #0]
 80014d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014dc:	81a3      	strh	r3, [r4, #12]
 80014de:	9b00      	ldr	r3, [sp, #0]
 80014e0:	6163      	str	r3, [r4, #20]
 80014e2:	9b01      	ldr	r3, [sp, #4]
 80014e4:	6120      	str	r0, [r4, #16]
 80014e6:	b15b      	cbz	r3, 8001500 <__smakebuf_r+0x74>
 80014e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80014ec:	4630      	mov	r0, r6
 80014ee:	f000 f889 	bl	8001604 <_isatty_r>
 80014f2:	b128      	cbz	r0, 8001500 <__smakebuf_r+0x74>
 80014f4:	89a3      	ldrh	r3, [r4, #12]
 80014f6:	f023 0303 	bic.w	r3, r3, #3
 80014fa:	f043 0301 	orr.w	r3, r3, #1
 80014fe:	81a3      	strh	r3, [r4, #12]
 8001500:	89a0      	ldrh	r0, [r4, #12]
 8001502:	4305      	orrs	r5, r0
 8001504:	81a5      	strh	r5, [r4, #12]
 8001506:	e7cd      	b.n	80014a4 <__smakebuf_r+0x18>
 8001508:	08000781 	.word	0x08000781

0800150c <__malloc_lock>:
 800150c:	4801      	ldr	r0, [pc, #4]	; (8001514 <__malloc_lock+0x8>)
 800150e:	f7ff ba09 	b.w	8000924 <__retarget_lock_acquire_recursive>
 8001512:	bf00      	nop
 8001514:	20000088 	.word	0x20000088

08001518 <__malloc_unlock>:
 8001518:	4801      	ldr	r0, [pc, #4]	; (8001520 <__malloc_unlock+0x8>)
 800151a:	f7ff ba04 	b.w	8000926 <__retarget_lock_release_recursive>
 800151e:	bf00      	nop
 8001520:	20000088 	.word	0x20000088

08001524 <_free_r>:
 8001524:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001526:	2900      	cmp	r1, #0
 8001528:	d044      	beq.n	80015b4 <_free_r+0x90>
 800152a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800152e:	9001      	str	r0, [sp, #4]
 8001530:	2b00      	cmp	r3, #0
 8001532:	f1a1 0404 	sub.w	r4, r1, #4
 8001536:	bfb8      	it	lt
 8001538:	18e4      	addlt	r4, r4, r3
 800153a:	f7ff ffe7 	bl	800150c <__malloc_lock>
 800153e:	4a1e      	ldr	r2, [pc, #120]	; (80015b8 <_free_r+0x94>)
 8001540:	9801      	ldr	r0, [sp, #4]
 8001542:	6813      	ldr	r3, [r2, #0]
 8001544:	b933      	cbnz	r3, 8001554 <_free_r+0x30>
 8001546:	6063      	str	r3, [r4, #4]
 8001548:	6014      	str	r4, [r2, #0]
 800154a:	b003      	add	sp, #12
 800154c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001550:	f7ff bfe2 	b.w	8001518 <__malloc_unlock>
 8001554:	42a3      	cmp	r3, r4
 8001556:	d908      	bls.n	800156a <_free_r+0x46>
 8001558:	6825      	ldr	r5, [r4, #0]
 800155a:	1961      	adds	r1, r4, r5
 800155c:	428b      	cmp	r3, r1
 800155e:	bf01      	itttt	eq
 8001560:	6819      	ldreq	r1, [r3, #0]
 8001562:	685b      	ldreq	r3, [r3, #4]
 8001564:	1949      	addeq	r1, r1, r5
 8001566:	6021      	streq	r1, [r4, #0]
 8001568:	e7ed      	b.n	8001546 <_free_r+0x22>
 800156a:	461a      	mov	r2, r3
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	b10b      	cbz	r3, 8001574 <_free_r+0x50>
 8001570:	42a3      	cmp	r3, r4
 8001572:	d9fa      	bls.n	800156a <_free_r+0x46>
 8001574:	6811      	ldr	r1, [r2, #0]
 8001576:	1855      	adds	r5, r2, r1
 8001578:	42a5      	cmp	r5, r4
 800157a:	d10b      	bne.n	8001594 <_free_r+0x70>
 800157c:	6824      	ldr	r4, [r4, #0]
 800157e:	4421      	add	r1, r4
 8001580:	1854      	adds	r4, r2, r1
 8001582:	42a3      	cmp	r3, r4
 8001584:	6011      	str	r1, [r2, #0]
 8001586:	d1e0      	bne.n	800154a <_free_r+0x26>
 8001588:	681c      	ldr	r4, [r3, #0]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	6053      	str	r3, [r2, #4]
 800158e:	4421      	add	r1, r4
 8001590:	6011      	str	r1, [r2, #0]
 8001592:	e7da      	b.n	800154a <_free_r+0x26>
 8001594:	d902      	bls.n	800159c <_free_r+0x78>
 8001596:	230c      	movs	r3, #12
 8001598:	6003      	str	r3, [r0, #0]
 800159a:	e7d6      	b.n	800154a <_free_r+0x26>
 800159c:	6825      	ldr	r5, [r4, #0]
 800159e:	1961      	adds	r1, r4, r5
 80015a0:	428b      	cmp	r3, r1
 80015a2:	bf04      	itt	eq
 80015a4:	6819      	ldreq	r1, [r3, #0]
 80015a6:	685b      	ldreq	r3, [r3, #4]
 80015a8:	6063      	str	r3, [r4, #4]
 80015aa:	bf04      	itt	eq
 80015ac:	1949      	addeq	r1, r1, r5
 80015ae:	6021      	streq	r1, [r4, #0]
 80015b0:	6054      	str	r4, [r2, #4]
 80015b2:	e7ca      	b.n	800154a <_free_r+0x26>
 80015b4:	b003      	add	sp, #12
 80015b6:	bd30      	pop	{r4, r5, pc}
 80015b8:	2000008c 	.word	0x2000008c

080015bc <_read_r>:
 80015bc:	b538      	push	{r3, r4, r5, lr}
 80015be:	4d07      	ldr	r5, [pc, #28]	; (80015dc <_read_r+0x20>)
 80015c0:	4604      	mov	r4, r0
 80015c2:	4608      	mov	r0, r1
 80015c4:	4611      	mov	r1, r2
 80015c6:	2200      	movs	r2, #0
 80015c8:	602a      	str	r2, [r5, #0]
 80015ca:	461a      	mov	r2, r3
 80015cc:	f7fe ff9c 	bl	8000508 <_read>
 80015d0:	1c43      	adds	r3, r0, #1
 80015d2:	d102      	bne.n	80015da <_read_r+0x1e>
 80015d4:	682b      	ldr	r3, [r5, #0]
 80015d6:	b103      	cbz	r3, 80015da <_read_r+0x1e>
 80015d8:	6023      	str	r3, [r4, #0]
 80015da:	bd38      	pop	{r3, r4, r5, pc}
 80015dc:	20000094 	.word	0x20000094

080015e0 <_fstat_r>:
 80015e0:	b538      	push	{r3, r4, r5, lr}
 80015e2:	4d07      	ldr	r5, [pc, #28]	; (8001600 <_fstat_r+0x20>)
 80015e4:	2300      	movs	r3, #0
 80015e6:	4604      	mov	r4, r0
 80015e8:	4608      	mov	r0, r1
 80015ea:	4611      	mov	r1, r2
 80015ec:	602b      	str	r3, [r5, #0]
 80015ee:	f7fe ffd0 	bl	8000592 <_fstat>
 80015f2:	1c43      	adds	r3, r0, #1
 80015f4:	d102      	bne.n	80015fc <_fstat_r+0x1c>
 80015f6:	682b      	ldr	r3, [r5, #0]
 80015f8:	b103      	cbz	r3, 80015fc <_fstat_r+0x1c>
 80015fa:	6023      	str	r3, [r4, #0]
 80015fc:	bd38      	pop	{r3, r4, r5, pc}
 80015fe:	bf00      	nop
 8001600:	20000094 	.word	0x20000094

08001604 <_isatty_r>:
 8001604:	b538      	push	{r3, r4, r5, lr}
 8001606:	4d06      	ldr	r5, [pc, #24]	; (8001620 <_isatty_r+0x1c>)
 8001608:	2300      	movs	r3, #0
 800160a:	4604      	mov	r4, r0
 800160c:	4608      	mov	r0, r1
 800160e:	602b      	str	r3, [r5, #0]
 8001610:	f7fe ffcf 	bl	80005b2 <_isatty>
 8001614:	1c43      	adds	r3, r0, #1
 8001616:	d102      	bne.n	800161e <_isatty_r+0x1a>
 8001618:	682b      	ldr	r3, [r5, #0]
 800161a:	b103      	cbz	r3, 800161e <_isatty_r+0x1a>
 800161c:	6023      	str	r3, [r4, #0]
 800161e:	bd38      	pop	{r3, r4, r5, pc}
 8001620:	20000094 	.word	0x20000094

08001624 <_init>:
 8001624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001626:	bf00      	nop
 8001628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800162a:	bc08      	pop	{r3}
 800162c:	469e      	mov	lr, r3
 800162e:	4770      	bx	lr

08001630 <_fini>:
 8001630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001632:	bf00      	nop
 8001634:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001636:	bc08      	pop	{r3}
 8001638:	469e      	mov	lr, r3
 800163a:	4770      	bx	lr
