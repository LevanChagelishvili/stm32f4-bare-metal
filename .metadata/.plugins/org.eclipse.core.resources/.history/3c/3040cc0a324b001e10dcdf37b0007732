#include "stm32f4xx.h"
#include "uart.h"

#define SYS_FREQ		16000000
#define UART_BAUDRATE	115200


static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate);
static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate);
void uart2_write(int ch);
char uart2_read(void);


int __io_putchar(int ch)
{
	uart2_write(ch);
	return ch;
}

/*
void dma1_strem6_init(uint32_t source, uint32_t dest, uint32_t lenght)
{
	// Enable Clock to DMA
	RCC->AHB1ENR |= (1U << 21);
	// Disable DMA1 stream6
	DMA1_Stream6->CR &= ~(1U << 0);
	// Wait
	while(DMA1_Stream6->CR & (1U << 0)){}
	// Clear interrupt flags of strem6
	DMA1->HIFCR |= (1U << 16);
	DMA1->HIFCR |= (1U << 18);
	DMA1->HIFCR |= (1U << 19);
	DMA1->HIFCR |= (1U << 20);
	DMA1->HIFCR |= (1U << 21);
	// Set dest buffer
	DMA1_Stream6->PAR = dest;
	// Set source buffer
	DMA1_Stream6->M0AR = source;
	// Set length buffer
	DMA1_Stream6->NDTR = lenght;
	// Select stream6 CH4
	DMA1_Stream6->CR = (1U << 27);
	// Enable memory increment
	DMA1_Stream6->CR |= (1U << 10);
	// Configure transfer direction
	DMA1_Stream6->CR |= (1U << 6);
	// Enable DMA transfer complete interrupt
	DMA1_Stream6->CR |= (1U << 4);
	// Enable direct mode and disable FIFO
	DMA1_Stream6->FCR = 0;
	// Enable DMA1 stream6
	DMA1_Stream6->CR |= (1U << 0);
	// Enable USRT2 transmitter DMA
	USART2->CR3 |= (1 << 7);
	// DMA interrupt enable NVIC
	NVIC_EnableIRQ(DMA1_Stream6_IRQn);
}
*/

static void dma_uart_init(uint32_t source, uint32_t dest, uint16_t size)
{
    // Enable Clock to DMA
    RCC->AHB1ENR |= (1U << 21);

    // Disable DMA1 stream6
    DMA1_Stream6->CR &= ~(1U << 0);

    // Wait
    while (DMA1_Stream6->CR & (1U << 0)) {}

    // Clear interrupt flags of stream6
    DMA1->HIFCR |= (1U << 16);
    DMA1->HIFCR |= (1U << 18);
    DMA1->HIFCR |= (1U << 19);
    DMA1->HIFCR |= (1U << 20);
    DMA1->HIFCR |= (1U << 21);

    // Set dest buffer
    DMA1_Stream6->PAR = dest;

    // Set source buffer
    DMA1_Stream6->M0AR = source;

    // Set length buffer
    DMA1_Stream6->NDTR = size;

    // Select stream6 CH4 for UART2
    DMA1_Stream6->CR = (1U << 27);

    // Enable memory increment
    DMA1_Stream6->CR |= (1U << 10);

    // Configure transfer direction
    DMA1_Stream6->CR |= (1U << 6);

    // Enable DMA transfer complete interrupt
    DMA1_Stream6->CR |= (1U << 4);

    // Enable direct mode and disable FIFO
    DMA1_Stream6->FCR = 0;

    // Enable DMA1 stream6
    DMA1_Stream6->CR |= (1U << 0);

    // Enable UART2 transmitter DMA
    USART2->CR3 |= (1U << 7);

    // DMA interrupt enable NVIC
    NVIC_EnableIRQ(DMA1_Stream6_IRQn);
}

void uart2_tx_init(void)
{
	// Enable clock access to GPIOA
	RCC->AHB1ENR |= (1U << 0);

	// PA2 to ultimate function mode
	GPIOA->MODER &= ~ (1U << 4);
	GPIOA->MODER |= (1U << 5);

	// Set PA2 alternate function type to UART_Tx (AF07)
	GPIOA->AFR[0] |= (1U << 8);
	GPIOA->AFR[0] |= (1U << 9);
	GPIOA->AFR[0] |= (1U << 10);
	GPIOA->AFR[0] &= ~(1U << 11);

	// Enable clock access to uart2
	RCC->APB1ENR |= (1U << 17);

	// Configure baudrate
	uart_set_baudrate(USART2, SYS_FREQ, UART_BAUDRATE);

	// UART transmit enable
	USART2->CR1 = (1U << 3);

	// Enable uart module
	USART2->CR1 |= (1U << 13);
}

void uart2_Rxtx_init(void)
{
	// Enable clock access to GPIOA
	RCC->AHB1ENR |= (1U << 0);

	// PA2 to ultimate function mode
	GPIOA->MODER &= ~ (1U << 4);
	GPIOA->MODER |= (1U << 5);

	// Set PA2 alternate function type to UART_Tx (AF07)
	GPIOA->AFR[0] |= (1U << 8);
	GPIOA->AFR[0] |= (1U << 9);
	GPIOA->AFR[0] |= (1U << 10);
	GPIOA->AFR[0] &= ~(1U << 11);

	// Rx pin enable and config
	GPIOA->MODER &= ~ (1U << 6);
	GPIOA->MODER |= (1U << 7);

	GPIOA->AFR[0] |= (1U << 12);
	GPIOA->AFR[0] |= (1U << 13);
	GPIOA->AFR[0] |= (1U << 14);
	GPIOA->AFR[0] &= ~(1U << 15);

	// Enable clock access to uart2
	RCC->APB1ENR |= (1U << 17);

	// Configure baudrate
	uart_set_baudrate(USART2, SYS_FREQ, UART_BAUDRATE);

	// UART transmit enable
	USART2->CR1 = ((1U << 2) | (1U << 3));

	// Enable uart module
	USART2->CR1 |= (1U << 13);
}

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate)
{
	USARTx->BRR = compute_uart_bd(PeriphClk,BaudRate);
}

static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate)
{
	return (PeriphClk + BaudRate / 2) / BaudRate;
}

char uart2_read(void)
{
	while(!(USART2->SR & (1U << 5))){}

	return USART2->DR;
}

void uart2_write(int ch)
{
	// Make sure that transmit data register is empty
	while(!(USART2->SR & (1U << 7))){}

	// Write to transmit data register
	USART2->DR = (ch & 0xFF);
}
